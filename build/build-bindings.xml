<?xml version="1.0" encoding="UTF-8" ?>
<!-- vim: set tabstop=8 shiftwidth=4 expandtab filetype=ant : -->
<project name="bindings" basedir=".">

    <path id="jnaerator.classpath">
      <fileset dir="${ivy.lib.dir}" includes="build/*.jar"/>
    </path>

    <target name="-check-bindings-exist" unless="bindings.exist">
        <available file="${llvm.bindings}" property="bindings.exist" />
    </target>

    <target name="clean-bindings">
        <delete file="${llvm.bindings}" />
    </target>

    <target name="bindings" depends="-check-bindings-exist, build-dependencies"
        unless="${bindings.exist}">
        <fail unless="llvm.home">
            Please specify the path to the directory
            of LLVM that includes the headers for C-bindings,
            i.e., /path/to/llvm/include/llvm-c .
            Use -Dllvm.home=/path/to/llvm/include/llvm-c to do that.
            Note that shell substitutions do not work and a full
            absolute path has to be specified.
        </fail>
        <fail unless="llvm.version">
            Please specify the llvm version with the flag -Dllvm.version=... .
        </fail>

        <java classname="com.ochafik.lang.jnaerator.JNAerator"
              classpathref="jnaerator.classpath"
              fork="true">
            <env key="LLVM_HOME" file="${llvm.home}" />
        </java>

        <!-- Perform minor changes to bindings -->

        <!-- Add license -->
        <concat destfile="${llvm.bindings}-new">
                <header file="build/license_bindings.txt" />
                <fileset file="${llvm.bindings}" />
        </concat>
        <move file="${llvm.bindings}-new" tofile="${llvm.bindings}" />

        <!-- Add @Generated and @SuppressWarnings annotation -->
        <replace file="${llvm.bindings}"
                token="public class LLVMLibrary"
                value="@javax.annotation.processing.Generated(&quot;JNAerator&quot;)${line.separator}@SuppressWarnings(&quot;all&quot;)${line.separator}public class LLVMLibrary" />


        <!-- Set concrete LLVM version to avoid conflicts -->
        <replace file="${llvm.bindings}"
                token="JNA_LIBRARY_NAME = &quot;LLVM&quot;;"
                value="JNA_LIBRARY_NAME = &quot;LLVM-${llvm.version}&quot;;" />

        <!-- Remove jnaerator-imports.
             We want to provide our own util classes to be independent of jnaerator -->
        <replaceregexp file="${llvm.bindings}"
                       flags="g"
                       match="com\.ochafik\.lang\.jnaerator\.runtime\.([a-zA-Z]*)"
                       replace="org.sosy_lab.llvm_j.binding.ext.\1" />
        <!-- Replace static initializer with static method for initialization     -->
        <replace file="${llvm.bindings}"
                 token="static {"
                 value="
                /**
                  Instantiates the LLVM library.
                  This method always has to be called before calling any other method of this class.
                  If you don't do this, an {@link UnsatisfiedLinkError} will occur.
                  */
                 public static void instantiate() {" />

        <!-- Adjust and format invalid Javadoc -->
        <antcall target="adjust-bindings-javadoc" />

        <!-- Format bindings to adhere to our styleguide as far as possible -->
        <property name="format.selection" location="${llvm.bindings}" />
        <antcall target="format-selection" />
    </target>

    <target name="adjust-bindings-javadoc">
        <replace file="${llvm.bindings}"
                 token="@see "
                 value="See " />
        <!-- We loose doxygen group information -->
        <replaceregexp file="${llvm.bindings}"
                 flags="g"
                 match="\n.*@defgroup.*"
                 replace="" />
        <replaceregexp file="${llvm.bindings}"
                 flags="g"
                 match="\n.*@ingroup.*"
                 replace="" />
        <replaceregexp file="${llvm.bindings}"
                 flags="g"
                 match="\n.*@\{.*"
                 replace="" />
        <replaceregexp file="${llvm.bindings}"
                 flags="g"
                 match="\n.*@\}.*"
                 replace="" />

        <!-- The @see tags reference C code, so that won't work with javadoc.
             We still want to keep the references, though. -->
        <replace file="${llvm.bindings}"
                 token="@see "
                 value="See " />

        <!-- And some minor fixes -->
        <replace file="${llvm.bindings}"
            token="&lt;&gt;"
            value="&amp;lt;&amp;gt;">
        </replace>
        <replace file="${llvm.bindings}"
                 token="* &lt; "
                 value="* " />
        <replace file="${llvm.bindings}"
                 token="&amp;)"
                 value="&amp;amp;)" />
    </target>
</project>
