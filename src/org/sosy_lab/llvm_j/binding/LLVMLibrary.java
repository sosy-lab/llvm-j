/*
 * llvm-j  is a library for parsing and modification of LLVM IR in Java.
 * This file is part of llvm-j.
 *
 * Copyright (C) 2012 Kevin Kelly
 * Copyright (C) 2013 Richard Lincoln
 * Copyright (C) 2017-2018 Marek Chalupa, Dirk Beyer
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.sosy_lab.llvm_j.binding;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import org.sosy_lab.llvm_j.binding.ext.NativeSize;
import org.sosy_lab.llvm_j.binding.ext.NativeSizeByReference;

/**
 * JNA Wrapper for library <b>LLVM</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource
 * projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@javax.annotation.processing.Generated("JNAerator")
@SuppressWarnings("all")
public class LLVMLibrary implements Library {
  public static final String JNA_LIBRARY_NAME = "LLVM-3.9.1";
  public static final NativeLibrary JNA_NATIVE_LIB =
      NativeLibrary.getInstance(LLVMLibrary.JNA_LIBRARY_NAME);
  /**
   * Instantiates the LLVM library. This method always has to be called before calling any other
   * method of this class. If you don't do this, an {@link UnsatisfiedLinkError} will occur.
   */
  public static void instantiate() {
    Native.register(LLVMLibrary.class, LLVMLibrary.JNA_NATIVE_LIB);
  }
  /** enum values */
  public static interface LLVMAttribute {
    public static final int LLVMZExtAttribute = 1 << 0;
    public static final int LLVMSExtAttribute = 1 << 1;
    public static final int LLVMNoReturnAttribute = 1 << 2;
    public static final int LLVMInRegAttribute = 1 << 3;
    public static final int LLVMStructRetAttribute = 1 << 4;
    public static final int LLVMNoUnwindAttribute = 1 << 5;
    public static final int LLVMNoAliasAttribute = 1 << 6;
    public static final int LLVMByValAttribute = 1 << 7;
    public static final int LLVMNestAttribute = 1 << 8;
    public static final int LLVMReadNoneAttribute = 1 << 9;
    public static final int LLVMReadOnlyAttribute = 1 << 10;
    public static final int LLVMNoInlineAttribute = 1 << 11;
    public static final int LLVMAlwaysInlineAttribute = 1 << 12;
    public static final int LLVMOptimizeForSizeAttribute = 1 << 13;
    public static final int LLVMStackProtectAttribute = 1 << 14;
    public static final int LLVMStackProtectReqAttribute = 1 << 15;
    public static final int LLVMAlignment = 31 << 16;
    public static final int LLVMNoCaptureAttribute = 1 << 21;
    public static final int LLVMNoRedZoneAttribute = 1 << 22;
    public static final int LLVMNoImplicitFloatAttribute = 1 << 23;
    public static final int LLVMNakedAttribute = 1 << 24;
    public static final int LLVMInlineHintAttribute = 1 << 25;
    public static final int LLVMStackAlignment = 7 << 26;
    public static final int LLVMReturnsTwice = 1 << 29;
    public static final int LLVMUWTable = 1 << 30;
    public static final int LLVMNonLazyBind = 1 << 31;
  };
  /** enum values */
  public static interface LLVMOpcode {
    public static final int LLVMRet = 1;
    public static final int LLVMBr = 2;
    public static final int LLVMSwitch = 3;
    public static final int LLVMIndirectBr = 4;
    public static final int LLVMInvoke = 5;
    public static final int LLVMUnreachable = 7;
    public static final int LLVMAdd = 8;
    public static final int LLVMFAdd = 9;
    public static final int LLVMSub = 10;
    public static final int LLVMFSub = 11;
    public static final int LLVMMul = 12;
    public static final int LLVMFMul = 13;
    public static final int LLVMUDiv = 14;
    public static final int LLVMSDiv = 15;
    public static final int LLVMFDiv = 16;
    public static final int LLVMURem = 17;
    public static final int LLVMSRem = 18;
    public static final int LLVMFRem = 19;
    public static final int LLVMShl = 20;
    public static final int LLVMLShr = 21;
    public static final int LLVMAShr = 22;
    public static final int LLVMAnd = 23;
    public static final int LLVMOr = 24;
    public static final int LLVMXor = 25;
    public static final int LLVMAlloca = 26;
    public static final int LLVMLoad = 27;
    public static final int LLVMStore = 28;
    public static final int LLVMGetElementPtr = 29;
    public static final int LLVMTrunc = 30;
    public static final int LLVMZExt = 31;
    public static final int LLVMSExt = 32;
    public static final int LLVMFPToUI = 33;
    public static final int LLVMFPToSI = 34;
    public static final int LLVMUIToFP = 35;
    public static final int LLVMSIToFP = 36;
    public static final int LLVMFPTrunc = 37;
    public static final int LLVMFPExt = 38;
    public static final int LLVMPtrToInt = 39;
    public static final int LLVMIntToPtr = 40;
    public static final int LLVMBitCast = 41;
    public static final int LLVMAddrSpaceCast = 60;
    public static final int LLVMICmp = 42;
    public static final int LLVMFCmp = 43;
    public static final int LLVMPHI = 44;
    public static final int LLVMCall = 45;
    public static final int LLVMSelect = 46;
    public static final int LLVMUserOp1 = 47;
    public static final int LLVMUserOp2 = 48;
    public static final int LLVMVAArg = 49;
    public static final int LLVMExtractElement = 50;
    public static final int LLVMInsertElement = 51;
    public static final int LLVMShuffleVector = 52;
    public static final int LLVMExtractValue = 53;
    public static final int LLVMInsertValue = 54;
    public static final int LLVMFence = 55;
    public static final int LLVMAtomicCmpXchg = 56;
    public static final int LLVMAtomicRMW = 57;
    public static final int LLVMResume = 58;
    public static final int LLVMLandingPad = 59;
    public static final int LLVMCleanupRet = 61;
    public static final int LLVMCatchRet = 62;
    public static final int LLVMCatchPad = 63;
    public static final int LLVMCleanupPad = 64;
    public static final int LLVMCatchSwitch = 65;
  };
  /** enum values */
  public static interface LLVMTypeKind {
    /** type with no size */
    public static final int LLVMVoidTypeKind = 0;
    /** 16 bit floating point type */
    public static final int LLVMHalfTypeKind = 1;
    /** 32 bit floating point type */
    public static final int LLVMFloatTypeKind = 2;
    /** 64 bit floating point type */
    public static final int LLVMDoubleTypeKind = 3;
    /** 80 bit floating point type (X87) */
    public static final int LLVMX86_FP80TypeKind = 4;
    /** 128 bit floating point type (112-bit mantissa) */
    public static final int LLVMFP128TypeKind = 5;
    /** 128 bit floating point type (two 64-bits) */
    public static final int LLVMPPC_FP128TypeKind = 6;
    /** Labels */
    public static final int LLVMLabelTypeKind = 7;
    /** Arbitrary bit width integers */
    public static final int LLVMIntegerTypeKind = 8;
    /** Functions */
    public static final int LLVMFunctionTypeKind = 9;
    /** Structures */
    public static final int LLVMStructTypeKind = 10;
    /** Arrays */
    public static final int LLVMArrayTypeKind = 11;
    /** Pointers */
    public static final int LLVMPointerTypeKind = 12;
    /** SIMD 'packed' format, or other vector type */
    public static final int LLVMVectorTypeKind = 13;
    /** Metadata */
    public static final int LLVMMetadataTypeKind = 14;
    /** X86 MMX */
    public static final int LLVMX86_MMXTypeKind = 15;
    /** Tokens */
    public static final int LLVMTokenTypeKind = 16;
  };
  /** enum values */
  public static interface LLVMLinkage {
    /** Externally visible function */
    public static final int LLVMExternalLinkage = 0;

    public static final int LLVMAvailableExternallyLinkage = 1;
    /** Keep one copy of function when linking (inline) */
    public static final int LLVMLinkOnceAnyLinkage = 2;
    /**
     * Same, but only replaced by something<br>
     * equivalent.
     */
    public static final int LLVMLinkOnceODRLinkage = 3;
    /** Obsolete */
    public static final int LLVMLinkOnceODRAutoHideLinkage = 4;
    /** Keep one copy of function when linking (weak) */
    public static final int LLVMWeakAnyLinkage = 5;
    /**
     * Same, but only replaced by something<br>
     * equivalent.
     */
    public static final int LLVMWeakODRLinkage = 6;
    /** Special purpose, only applies to global arrays */
    public static final int LLVMAppendingLinkage = 7;
    /**
     * Rename collisions when linking (static<br>
     * functions)
     */
    public static final int LLVMInternalLinkage = 8;
    /** Like Internal, but omit from symbol table */
    public static final int LLVMPrivateLinkage = 9;
    /** Obsolete */
    public static final int LLVMDLLImportLinkage = 10;
    /** Obsolete */
    public static final int LLVMDLLExportLinkage = 11;
    /** ExternalWeak linkage description */
    public static final int LLVMExternalWeakLinkage = 12;
    /** Obsolete */
    public static final int LLVMGhostLinkage = 13;
    /** Tentative definitions */
    public static final int LLVMCommonLinkage = 14;
    /** Like Private, but linker removes. */
    public static final int LLVMLinkerPrivateLinkage = 15;
    /** Like LinkerPrivate, but is weak. */
    public static final int LLVMLinkerPrivateWeakLinkage = 16;
  };
  /** enum values */
  public static interface LLVMVisibility {
    /** The GV is visible */
    public static final int LLVMDefaultVisibility = 0;
    /** The GV is hidden */
    public static final int LLVMHiddenVisibility = 1;
    /** The GV is protected */
    public static final int LLVMProtectedVisibility = 2;
  };
  /** enum values */
  public static interface LLVMDLLStorageClass {
    public static final int LLVMDefaultStorageClass = 0;
    /** Function to be imported from DLL. */
    public static final int LLVMDLLImportStorageClass = 1;
    /** Function to be accessible from DLL. */
    public static final int LLVMDLLExportStorageClass = 2;
  };
  /** enum values */
  public static interface LLVMCallConv {
    public static final int LLVMCCallConv = 0;
    public static final int LLVMFastCallConv = 8;
    public static final int LLVMColdCallConv = 9;
    public static final int LLVMWebKitJSCallConv = 12;
    public static final int LLVMAnyRegCallConv = 13;
    public static final int LLVMX86StdcallCallConv = 64;
    public static final int LLVMX86FastcallCallConv = 65;
  };
  /** enum values */
  public static interface LLVMValueKind {
    public static final int LLVMArgumentValueKind = 0;
    public static final int LLVMBasicBlockValueKind = 1;
    public static final int LLVMMemoryUseValueKind = 2;
    public static final int LLVMMemoryDefValueKind = 3;
    public static final int LLVMMemoryPhiValueKind = 4;
    public static final int LLVMFunctionValueKind = 5;
    public static final int LLVMGlobalAliasValueKind = 6;
    public static final int LLVMGlobalIFuncValueKind = 7;
    public static final int LLVMGlobalVariableValueKind = 8;
    public static final int LLVMBlockAddressValueKind = 9;
    public static final int LLVMConstantExprValueKind = 10;
    public static final int LLVMConstantArrayValueKind = 11;
    public static final int LLVMConstantStructValueKind = 12;
    public static final int LLVMConstantVectorValueKind = 13;
    public static final int LLVMUndefValueValueKind = 14;
    public static final int LLVMConstantAggregateZeroValueKind = 15;
    public static final int LLVMConstantDataArrayValueKind = 16;
    public static final int LLVMConstantDataVectorValueKind = 17;
    public static final int LLVMConstantIntValueKind = 18;
    public static final int LLVMConstantFPValueKind = 19;
    public static final int LLVMConstantPointerNullValueKind = 20;
    public static final int LLVMConstantTokenNoneValueKind = 21;
    public static final int LLVMMetadataAsValueValueKind = 22;
    public static final int LLVMInlineAsmValueKind = 23;
    public static final int LLVMInstructionValueKind = 24;
  };
  /** enum values */
  public static interface LLVMIntPredicate {
    /** equal */
    public static final int LLVMIntEQ = 32;
    /** not equal */
    public static final int LLVMIntNE = 33;
    /** unsigned greater than */
    public static final int LLVMIntUGT = 34;
    /** unsigned greater or equal */
    public static final int LLVMIntUGE = 35;
    /** unsigned less than */
    public static final int LLVMIntULT = 36;
    /** unsigned less or equal */
    public static final int LLVMIntULE = 37;
    /** signed greater than */
    public static final int LLVMIntSGT = 38;
    /** signed greater or equal */
    public static final int LLVMIntSGE = 39;
    /** signed less than */
    public static final int LLVMIntSLT = 40;
    /** signed less or equal */
    public static final int LLVMIntSLE = 41;
  };
  /** enum values */
  public static interface LLVMRealPredicate {
    /** Always false (always folded) */
    public static final int LLVMRealPredicateFalse = 0;
    /** True if ordered and equal */
    public static final int LLVMRealOEQ = 1;
    /** True if ordered and greater than */
    public static final int LLVMRealOGT = 2;
    /** True if ordered and greater than or equal */
    public static final int LLVMRealOGE = 3;
    /** True if ordered and less than */
    public static final int LLVMRealOLT = 4;
    /** True if ordered and less than or equal */
    public static final int LLVMRealOLE = 5;
    /** True if ordered and operands are unequal */
    public static final int LLVMRealONE = 6;
    /** True if ordered (no nans) */
    public static final int LLVMRealORD = 7;
    /** True if unordered: isnan(X) | isnan(Y) */
    public static final int LLVMRealUNO = 8;
    /** True if unordered or equal */
    public static final int LLVMRealUEQ = 9;
    /** True if unordered or greater than */
    public static final int LLVMRealUGT = 10;
    /** True if unordered, greater than, or equal */
    public static final int LLVMRealUGE = 11;
    /** True if unordered or less than */
    public static final int LLVMRealULT = 12;
    /** True if unordered, less than, or equal */
    public static final int LLVMRealULE = 13;
    /** True if unordered or not equal */
    public static final int LLVMRealUNE = 14;
    /** Always true (always folded) */
    public static final int LLVMRealPredicateTrue = 15;
  };
  /** enum values */
  public static interface LLVMLandingPadClauseTy {
    /** A catch clause */
    public static final int LLVMLandingPadCatch = 0;
    /** A filter clause */
    public static final int LLVMLandingPadFilter = 1;
  };
  /** enum values */
  public static interface LLVMThreadLocalMode {
    public static final int LLVMNotThreadLocal = 0;
    public static final int LLVMGeneralDynamicTLSModel = 1;
    public static final int LLVMLocalDynamicTLSModel = 2;
    public static final int LLVMInitialExecTLSModel = 3;
    public static final int LLVMLocalExecTLSModel = 4;
  };
  /** enum values */
  public static interface LLVMAtomicOrdering {
    /** A load or store which is not atomic */
    public static final int LLVMAtomicOrderingNotAtomic = 0;
    /**
     * Lowest level of atomicity, guarantees<br>
     * somewhat sane results, lock free.
     */
    public static final int LLVMAtomicOrderingUnordered = 1;
    /**
     * guarantees that if you take all the<br>
     * operations affecting a specific address,<br>
     * a consistent ordering exists
     */
    public static final int LLVMAtomicOrderingMonotonic = 2;
    /**
     * Acquire provides a barrier of the sort<br>
     * necessary to acquire a lock to access other<br>
     * memory with normal loads and stores.
     */
    public static final int LLVMAtomicOrderingAcquire = 4;
    /**
     * Release is similar to Acquire, but with<br>
     * a barrier of the sort necessary to release<br>
     * a lock.
     */
    public static final int LLVMAtomicOrderingRelease = 5;
    /**
     * provides both an Acquire and a<br>
     * Release barrier (for fences and<br>
     * operations which both read and write<br>
     * memory).
     */
    public static final int LLVMAtomicOrderingAcquireRelease = 6;
    /**
     * provides Acquire semantics<br>
     * for loads and Release<br>
     * semantics for stores.<br>
     * Additionally, it guarantees<br>
     * that a total ordering exists<br>
     * between all<br>
     * SequentiallyConsistent<br>
     * operations.
     */
    public static final int LLVMAtomicOrderingSequentiallyConsistent = 7;
  };
  /** enum values */
  public static interface LLVMAtomicRMWBinOp {
    /** Set the new value and return the one old */
    public static final int LLVMAtomicRMWBinOpXchg = 0;
    /** Add a value and return the old one */
    public static final int LLVMAtomicRMWBinOpAdd = 1;
    /** Subtract a value and return the old one */
    public static final int LLVMAtomicRMWBinOpSub = 2;
    /** And a value and return the old one */
    public static final int LLVMAtomicRMWBinOpAnd = 3;
    /** Not-And a value and return the old one */
    public static final int LLVMAtomicRMWBinOpNand = 4;
    /** OR a value and return the old one */
    public static final int LLVMAtomicRMWBinOpOr = 5;
    /** Xor a value and return the old one */
    public static final int LLVMAtomicRMWBinOpXor = 6;
    /**
     * Sets the value if it's greater than the<br>
     * original using a signed comparison and return<br>
     * the old one
     */
    public static final int LLVMAtomicRMWBinOpMax = 7;
    /**
     * Sets the value if it's Smaller than the<br>
     * original using a signed comparison and return<br>
     * the old one
     */
    public static final int LLVMAtomicRMWBinOpMin = 8;
    /**
     * Sets the value if it's greater than the<br>
     * original using an unsigned comparison and return<br>
     * the old one
     */
    public static final int LLVMAtomicRMWBinOpUMax = 9;
    /**
     * Sets the value if it's greater than the<br>
     * original using an unsigned comparison and return<br>
     * the old one
     */
    public static final int LLVMAtomicRMWBinOpUMin = 10;
  };
  /** enum values */
  public static interface LLVMDiagnosticSeverity {
    public static final int LLVMDSError = 0;
    public static final int LLVMDSWarning = 1;
    public static final int LLVMDSRemark = 2;
    public static final int LLVMDSNote = 3;
  };

  public static final int LLVMAttributeReturnIndex = 0;
  public static final int LLVMAttributeFunctionIndex = -1;
  /** enum values */
  public static interface LLVMVerifierFailureAction {
    /** verifier will print to stderr and abort() */
    public static final int LLVMAbortProcessAction = 0;
    /** verifier will print to stderr and return 1 */
    public static final int LLVMPrintMessageAction = 1;
    /** verifier will just return 1 */
    public static final int LLVMReturnStatusAction = 2;
  };
  /** enum values */
  public static interface LLVMByteOrdering {
    public static final int LLVMBigEndian = 0;
    public static final int LLVMLittleEndian = 1;
  };

  public interface LLVMDiagnosticHandler extends Callback {
    void apply(Pointer voidPtr1);
  };

  public interface LLVMYieldCallback extends Callback {
    void apply(Pointer voidPtr1);
  };
  /**
   * See llvm::createBBVectorizePass function.<br>
   * Original signature : <code>void LLVMAddBBVectorizePass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddBBVectorizePass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLoopVectorizePass function.<br>
   * Original signature : <code>void LLVMAddLoopVectorizePass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLoopVectorizePass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createSLPVectorizerPass function.<br>
   * Original signature : <code>void LLVMAddSLPVectorizePass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddSLPVectorizePass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createArgumentPromotionPass function.<br>
   * Original signature : <code>void LLVMAddArgumentPromotionPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddArgumentPromotionPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createConstantMergePass function.<br>
   * Original signature : <code>void LLVMAddConstantMergePass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddConstantMergePass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createDeadArgEliminationPass function.<br>
   * Original signature : <code>void LLVMAddDeadArgEliminationPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddDeadArgEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createFunctionAttrsPass function.<br>
   * Original signature : <code>void LLVMAddFunctionAttrsPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddFunctionAttrsPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createFunctionInliningPass function.<br>
   * Original signature : <code>void LLVMAddFunctionInliningPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddFunctionInliningPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createAlwaysInlinerPass function.<br>
   * Original signature : <code>void LLVMAddAlwaysInlinerPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddAlwaysInlinerPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createGlobalDCEPass function.<br>
   * Original signature : <code>void LLVMAddGlobalDCEPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddGlobalDCEPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createGlobalOptimizerPass function.<br>
   * Original signature : <code>void LLVMAddGlobalOptimizerPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddGlobalOptimizerPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createIPConstantPropagationPass function.<br>
   * Original signature : <code>void LLVMAddIPConstantPropagationPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddIPConstantPropagationPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createPruneEHPass function.<br>
   * Original signature : <code>void LLVMAddPruneEHPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddPruneEHPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createIPSCCPPass function.<br>
   * Original signature : <code>void LLVMAddIPSCCPPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddIPSCCPPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createInternalizePass function.<br>
   * Original signature : <code>void LLVMAddInternalizePass(unsigned)</code>
   */
  public static native void LLVMAddInternalizePass(int AllButMain);
  /**
   * See llvm::createStripDeadPrototypesPass function.<br>
   * Original signature : <code>void LLVMAddStripDeadPrototypesPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddStripDeadPrototypesPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createStripSymbolsPass function.<br>
   * Original signature : <code>void LLVMAddStripSymbolsPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddStripSymbolsPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::PassManagerBuilder.<br>
   * Original signature : <code>LLVMPassManagerBuilderRef LLVMPassManagerBuilderCreate()</code>
   */
  public static native LLVMLibrary.LLVMPassManagerBuilderRef LLVMPassManagerBuilderCreate();
  /**
   * Original signature : <code>void LLVMPassManagerBuilderDispose(LLVMPassManagerBuilderRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderDispose(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef)}
   *     and {@link #LLVMPassManagerBuilderDispose(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderDispose(Pointer PMB);
  /**
   * Original signature : <code>void LLVMPassManagerBuilderDispose(LLVMPassManagerBuilderRef)</code>
   */
  public static native void LLVMPassManagerBuilderDispose(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB);
  /**
   * See llvm::PassManagerBuilder::OptLevel.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetOptLevel(LLVMPassManagerBuilderRef, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderSetOptLevel(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     int)} and {@link #LLVMPassManagerBuilderSetOptLevel(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderSetOptLevel(Pointer PMB, int OptLevel);
  /**
   * See llvm::PassManagerBuilder::OptLevel.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetOptLevel(LLVMPassManagerBuilderRef, unsigned)</code>
   */
  public static native void LLVMPassManagerBuilderSetOptLevel(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, int OptLevel);
  /**
   * See llvm::PassManagerBuilder::SizeLevel.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetSizeLevel(LLVMPassManagerBuilderRef, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderSetSizeLevel(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     int)} and {@link #LLVMPassManagerBuilderSetSizeLevel(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderSetSizeLevel(Pointer PMB, int SizeLevel);
  /**
   * See llvm::PassManagerBuilder::SizeLevel.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetSizeLevel(LLVMPassManagerBuilderRef, unsigned)</code>
   */
  public static native void LLVMPassManagerBuilderSetSizeLevel(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, int SizeLevel);
  /**
   * See llvm::PassManagerBuilder::DisableUnitAtATime.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetDisableUnitAtATime(LLVMPassManagerBuilderRef, LLVMBool)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderSetDisableUnitAtATime(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMPassManagerBuilderSetDisableUnitAtATime(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderSetDisableUnitAtATime(
      Pointer PMB, LLVMLibrary.LLVMBool Value);
  /**
   * See llvm::PassManagerBuilder::DisableUnitAtATime.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetDisableUnitAtATime(LLVMPassManagerBuilderRef, LLVMBool)</code>
   */
  public static native void LLVMPassManagerBuilderSetDisableUnitAtATime(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMBool Value);
  /**
   * See llvm::PassManagerBuilder::DisableUnrollLoops.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetDisableUnrollLoops(LLVMPassManagerBuilderRef, LLVMBool)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderSetDisableUnrollLoops(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMPassManagerBuilderSetDisableUnrollLoops(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderSetDisableUnrollLoops(
      Pointer PMB, LLVMLibrary.LLVMBool Value);
  /**
   * See llvm::PassManagerBuilder::DisableUnrollLoops.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetDisableUnrollLoops(LLVMPassManagerBuilderRef, LLVMBool)</code>
   */
  public static native void LLVMPassManagerBuilderSetDisableUnrollLoops(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMBool Value);
  /**
   * See llvm::PassManagerBuilder::DisableSimplifyLibCalls<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(LLVMPassManagerBuilderRef, LLVMBool)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderSetDisableSimplifyLibCalls(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMPassManagerBuilderSetDisableSimplifyLibCalls(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(
      Pointer PMB, LLVMLibrary.LLVMBool Value);
  /**
   * See llvm::PassManagerBuilder::DisableSimplifyLibCalls<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(LLVMPassManagerBuilderRef, LLVMBool)
   * </code>
   */
  public static native void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMBool Value);
  /**
   * See llvm::PassManagerBuilder::Inliner.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderUseInlinerWithThreshold(LLVMPassManagerBuilderRef, unsigned)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderUseInlinerWithThreshold(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     int)} and {@link #LLVMPassManagerBuilderUseInlinerWithThreshold(com.sun.jna.Pointer, int)}
   *     instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderUseInlinerWithThreshold(
      Pointer PMB, int Threshold);
  /**
   * See llvm::PassManagerBuilder::Inliner.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderUseInlinerWithThreshold(LLVMPassManagerBuilderRef, unsigned)</code>
   */
  public static native void LLVMPassManagerBuilderUseInlinerWithThreshold(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, int Threshold);
  /**
   * See llvm::PassManagerBuilder::populateFunctionPassManager.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderPopulateFunctionPassManager(LLVMPassManagerBuilderRef, LLVMPassManagerRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderPopulateFunctionPassManager(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef)} and {@link
   *     #LLVMPassManagerBuilderPopulateFunctionPassManager(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderPopulateFunctionPassManager(
      Pointer PMB, LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::PassManagerBuilder::populateFunctionPassManager.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderPopulateFunctionPassManager(LLVMPassManagerBuilderRef, LLVMPassManagerRef)
   * </code>
   */
  public static native void LLVMPassManagerBuilderPopulateFunctionPassManager(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::PassManagerBuilder::populateModulePassManager.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderPopulateModulePassManager(LLVMPassManagerBuilderRef, LLVMPassManagerRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderPopulateModulePassManager(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef)} and {@link
   *     #LLVMPassManagerBuilderPopulateModulePassManager(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderPopulateModulePassManager(
      Pointer PMB, LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::PassManagerBuilder::populateModulePassManager.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderPopulateModulePassManager(LLVMPassManagerBuilderRef, LLVMPassManagerRef)
   * </code>
   */
  public static native void LLVMPassManagerBuilderPopulateModulePassManager(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB, LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::PassManagerBuilder::populateLTOPassManager.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderPopulateLTOPassManager(LLVMPassManagerBuilderRef, LLVMPassManagerRef, LLVMBool, LLVMBool)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPassManagerBuilderPopulateLTOPassManager(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMPassManagerBuilderPopulateLTOPassManager(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native void LLVMPassManagerBuilderPopulateLTOPassManager(
      Pointer PMB,
      LLVMLibrary.LLVMPassManagerRef PM,
      LLVMLibrary.LLVMBool Internalize,
      LLVMLibrary.LLVMBool RunInliner);
  /**
   * See llvm::PassManagerBuilder::populateLTOPassManager.<br>
   * Original signature : <code>
   * void LLVMPassManagerBuilderPopulateLTOPassManager(LLVMPassManagerBuilderRef, LLVMPassManagerRef, LLVMBool, LLVMBool)
   * </code>
   */
  public static native void LLVMPassManagerBuilderPopulateLTOPassManager(
      LLVMLibrary.LLVMPassManagerBuilderRef PMB,
      LLVMLibrary.LLVMPassManagerRef PM,
      LLVMLibrary.LLVMBool Internalize,
      LLVMLibrary.LLVMBool RunInliner);
  /**
   * See llvm::createAggressiveDCEPass function.<br>
   * Original signature : <code>void LLVMAddAggressiveDCEPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddAggressiveDCEPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createBitTrackingDCEPass function.<br>
   * Original signature : <code>void LLVMAddBitTrackingDCEPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddBitTrackingDCEPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createAlignmentFromAssumptionsPass function.<br>
   * Original signature : <code>void LLVMAddAlignmentFromAssumptionsPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddAlignmentFromAssumptionsPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createCFGSimplificationPass function.<br>
   * Original signature : <code>void LLVMAddCFGSimplificationPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddCFGSimplificationPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createDeadStoreEliminationPass function.<br>
   * Original signature : <code>void LLVMAddDeadStoreEliminationPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddDeadStoreEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createScalarizerPass function.<br>
   * Original signature : <code>void LLVMAddScalarizerPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddScalarizerPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createMergedLoadStoreMotionPass function.<br>
   * Original signature : <code>void LLVMAddMergedLoadStoreMotionPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddMergedLoadStoreMotionPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createGVNPass function.<br>
   * Original signature : <code>void LLVMAddGVNPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddGVNPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createIndVarSimplifyPass function.<br>
   * Original signature : <code>void LLVMAddIndVarSimplifyPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddIndVarSimplifyPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createInstructionCombiningPass function.<br>
   * Original signature : <code>void LLVMAddInstructionCombiningPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddInstructionCombiningPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createJumpThreadingPass function.<br>
   * Original signature : <code>void LLVMAddJumpThreadingPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddJumpThreadingPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLICMPass function.<br>
   * Original signature : <code>void LLVMAddLICMPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLICMPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLoopDeletionPass function.<br>
   * Original signature : <code>void LLVMAddLoopDeletionPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLoopDeletionPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLoopIdiomPass function<br>
   * Original signature : <code>void LLVMAddLoopIdiomPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLoopIdiomPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLoopRotatePass function.<br>
   * Original signature : <code>void LLVMAddLoopRotatePass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLoopRotatePass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLoopRerollPass function.<br>
   * Original signature : <code>void LLVMAddLoopRerollPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLoopRerollPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLoopUnrollPass function.<br>
   * Original signature : <code>void LLVMAddLoopUnrollPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLoopUnrollPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLoopUnswitchPass function.<br>
   * Original signature : <code>void LLVMAddLoopUnswitchPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLoopUnswitchPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createMemCpyOptPass function.<br>
   * Original signature : <code>void LLVMAddMemCpyOptPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddMemCpyOptPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createPartiallyInlineLibCallsPass function.<br>
   * Original signature : <code>void LLVMAddPartiallyInlineLibCallsPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddPartiallyInlineLibCallsPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLowerSwitchPass function.<br>
   * Original signature : <code>void LLVMAddLowerSwitchPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLowerSwitchPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createPromoteMemoryToRegisterPass function.<br>
   * Original signature : <code>void LLVMAddPromoteMemoryToRegisterPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddPromoteMemoryToRegisterPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createReassociatePass function.<br>
   * Original signature : <code>void LLVMAddReassociatePass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddReassociatePass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createSCCPPass function.<br>
   * Original signature : <code>void LLVMAddSCCPPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddSCCPPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createSROAPass function.<br>
   * Original signature : <code>void LLVMAddScalarReplAggregatesPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddScalarReplAggregatesPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createSROAPass function.<br>
   * Original signature : <code>void LLVMAddScalarReplAggregatesPassSSA(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddScalarReplAggregatesPassSSA(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createSROAPass function.<br>
   * Original signature : <code>
   * void LLVMAddScalarReplAggregatesPassWithThreshold(LLVMPassManagerRef, int)</code>
   */
  public static native void LLVMAddScalarReplAggregatesPassWithThreshold(
      LLVMLibrary.LLVMPassManagerRef PM, int Threshold);
  /**
   * See llvm::createSimplifyLibCallsPass function.<br>
   * Original signature : <code>void LLVMAddSimplifyLibCallsPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddSimplifyLibCallsPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createTailCallEliminationPass function.<br>
   * Original signature : <code>void LLVMAddTailCallEliminationPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddTailCallEliminationPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createConstantPropagationPass function.<br>
   * Original signature : <code>void LLVMAddConstantPropagationPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddConstantPropagationPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::demotePromoteMemoryToRegisterPass function.<br>
   * Original signature : <code>void LLVMAddDemoteMemoryToRegisterPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddDemoteMemoryToRegisterPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createVerifierPass function.<br>
   * Original signature : <code>void LLVMAddVerifierPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddVerifierPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createCorrelatedValuePropagationPass function<br>
   * Original signature : <code>void LLVMAddCorrelatedValuePropagationPass(LLVMPassManagerRef)
   * </code>
   */
  public static native void LLVMAddCorrelatedValuePropagationPass(
      LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createEarlyCSEPass function<br>
   * Original signature : <code>void LLVMAddEarlyCSEPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddEarlyCSEPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createLowerExpectIntrinsicPass function<br>
   * Original signature : <code>void LLVMAddLowerExpectIntrinsicPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddLowerExpectIntrinsicPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createTypeBasedAliasAnalysisPass function<br>
   * Original signature : <code>void LLVMAddTypeBasedAliasAnalysisPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddTypeBasedAliasAnalysisPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createScopedNoAliasAAPass function<br>
   * Original signature : <code>void LLVMAddScopedNoAliasAAPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddScopedNoAliasAAPass(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * See llvm::createBasicAliasAnalysisPass function<br>
   * Original signature : <code>void LLVMAddBasicAliasAnalysisPass(LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddBasicAliasAnalysisPass(LLVMLibrary.LLVMPassManagerRef PM);
  /** Original signature : <code>void LLVMInitializeCore(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeCore(LLVMLibrary.LLVMPassRegistryRef R);
  /**
   * Deallocate and destroy all ManagedStatic variables.<br>
   * See llvm::llvm_shutdown<br>
   * See ManagedStatic<br>
   * Original signature : <code>void LLVMShutdown()</code>
   */
  public static native void LLVMShutdown();
  /**
   * ===-- Error handling ----------------------------------------------------===<br>
   * Original signature : <code>char* LLVMCreateMessage(const char*)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMCreateMessage(java.lang.String)} and {@link
   *     #LLVMCreateMessage(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native Pointer LLVMCreateMessage(Pointer Message);
  /**
   * ===-- Error handling ----------------------------------------------------===<br>
   * Original signature : <code>char* LLVMCreateMessage(const char*)</code>
   */
  public static native Pointer LLVMCreateMessage(String Message);
  /**
   * Original signature : <code>void LLVMDisposeMessage(char*)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMDisposeMessage(java.nio.ByteBuffer)} and {@link
   *     #LLVMDisposeMessage(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMDisposeMessage(Pointer Message);
  /** Original signature : <code>void LLVMDisposeMessage(char*)</code> */
  public static native void LLVMDisposeMessage(ByteBuffer Message);
  /**
   * Create a new context.<br>
   * Every call to this function should be paired with a call to<br>
   * LLVMContextDispose() or the context will leak memory.<br>
   * Original signature : <code>LLVMContextRef LLVMContextCreate()</code>
   */
  public static native LLVMLibrary.LLVMContextRef LLVMContextCreate();
  /**
   * Obtain the global context instance.<br>
   * Original signature : <code>LLVMContextRef LLVMGetGlobalContext()</code>
   */
  public static native LLVMLibrary.LLVMContextRef LLVMGetGlobalContext();
  /**
   * Set the diagnostic handler for this context.<br>
   * Original signature : <code>
   * void LLVMContextSetDiagnosticHandler(LLVMContextRef, LLVMDiagnosticHandler, void*)</code>
   */
  public static native void LLVMContextSetDiagnosticHandler(
      LLVMLibrary.LLVMContextRef C,
      LLVMLibrary.LLVMDiagnosticHandler Handler,
      Pointer DiagnosticContext);
  /**
   * Get the diagnostic handler of this context.<br>
   * Original signature : <code>
   * LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler(
      LLVMLibrary.LLVMContextRef C);
  /**
   * Get the diagnostic context of this context.<br>
   * Original signature : <code>void* LLVMContextGetDiagnosticContext(LLVMContextRef)</code>
   */
  public static native Pointer LLVMContextGetDiagnosticContext(LLVMLibrary.LLVMContextRef C);
  /**
   * Set the yield callback function for this context.<br>
   * See LLVMContext::setYieldCallback()<br>
   * Original signature : <code>
   * void LLVMContextSetYieldCallback(LLVMContextRef, LLVMYieldCallback, void*)</code>
   */
  public static native void LLVMContextSetYieldCallback(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMYieldCallback Callback, Pointer OpaqueHandle);
  /**
   * Destroy a context instance.<br>
   * This should be called for every call to LLVMContextCreate() or memory<br>
   * will be leaked.<br>
   * Original signature : <code>void LLVMContextDispose(LLVMContextRef)</code>
   */
  public static native void LLVMContextDispose(LLVMLibrary.LLVMContextRef C);
  /**
   * Return a string representation of the DiagnosticInfo. Use<br>
   * LLVMDisposeMessage to free the string.<br>
   * See DiagnosticInfo::print()<br>
   * Original signature : <code>char* LLVMGetDiagInfoDescription(LLVMDiagnosticInfoRef)</code>
   */
  public static native Pointer LLVMGetDiagInfoDescription(LLVMLibrary.LLVMDiagnosticInfoRef DI);
  /**
   * Return an enum LLVMDiagnosticSeverity.<br>
   * See DiagnosticInfo::getSeverity()<br>
   * Original signature : <code>
   * LLVMDiagnosticSeverity LLVMGetDiagInfoSeverity(LLVMDiagnosticInfoRef)</code>
   */
  public static native int LLVMGetDiagInfoSeverity(LLVMLibrary.LLVMDiagnosticInfoRef DI);
  /**
   * Original signature : <code>int LLVMGetMDKindIDInContext(LLVMContextRef, const char*, unsigned)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetMDKindIDInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     java.lang.String, int)} and {@link
   *     #LLVMGetMDKindIDInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native int LLVMGetMDKindIDInContext(
      LLVMLibrary.LLVMContextRef C, Pointer Name, int SLen);
  /**
   * Original signature : <code>int LLVMGetMDKindIDInContext(LLVMContextRef, const char*, unsigned)
   * </code>
   */
  public static native int LLVMGetMDKindIDInContext(
      LLVMLibrary.LLVMContextRef C, String Name, int SLen);
  /**
   * Original signature : <code>int LLVMGetMDKindID(const char*, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMGetMDKindID(java.lang.String, int)} and {@link
   *     #LLVMGetMDKindID(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native int LLVMGetMDKindID(Pointer Name, int SLen);
  /** Original signature : <code>int LLVMGetMDKindID(const char*, unsigned)</code> */
  public static native int LLVMGetMDKindID(String Name, int SLen);
  /**
   * Return an unique id given the name of a enum attribute,<br>
   * or 0 if no attribute by that name exists.<br>
   * See http://llvm.org/docs/LangRef.html#parameter-attributes<br>
   * and http://llvm.org/docs/LangRef.html#function-attributes<br>
   * for the list of available attributes.<br>
   * NB: Attribute names and/or id are subject to change without<br>
   * going through the C API deprecation cycle.<br>
   * Original signature : <code>int LLVMGetEnumAttributeKindForName(const char*, size_t)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMGetEnumAttributeKindForName(java.lang.String,
   *     org.sosy_lab.llvm_j.binding.ext.NativeSize)} and {@link
   *     #LLVMGetEnumAttributeKindForName(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.ext.NativeSize)} instead
   */
  @Deprecated
  public static native int LLVMGetEnumAttributeKindForName(Pointer Name, NativeSize SLen);
  /**
   * Return an unique id given the name of a enum attribute,<br>
   * or 0 if no attribute by that name exists.<br>
   * See http://llvm.org/docs/LangRef.html#parameter-attributes<br>
   * and http://llvm.org/docs/LangRef.html#function-attributes<br>
   * for the list of available attributes.<br>
   * NB: Attribute names and/or id are subject to change without<br>
   * going through the C API deprecation cycle.<br>
   * Original signature : <code>int LLVMGetEnumAttributeKindForName(const char*, size_t)</code>
   */
  public static native int LLVMGetEnumAttributeKindForName(String Name, NativeSize SLen);
  /** Original signature : <code>int LLVMGetLastEnumAttributeKind()</code> */
  public static native int LLVMGetLastEnumAttributeKind();
  /**
   * Create an enum attribute.<br>
   * Original signature : <code>
   * LLVMAttributeRef LLVMCreateEnumAttribute(LLVMContextRef, unsigned, uint64_t)</code>
   */
  public static native LLVMLibrary.LLVMAttributeRef LLVMCreateEnumAttribute(
      LLVMLibrary.LLVMContextRef C, int KindID, long Val);
  /**
   * Get the unique id corresponding to the enum attribute<br>
   * passed as argument.<br>
   * Original signature : <code>int LLVMGetEnumAttributeKind(LLVMAttributeRef)</code>
   */
  public static native int LLVMGetEnumAttributeKind(LLVMLibrary.LLVMAttributeRef A);
  /**
   * Get the enum attribute's value. 0 is returned if none exists.<br>
   * Original signature : <code>uint64_t LLVMGetEnumAttributeValue(LLVMAttributeRef)</code>
   */
  public static native long LLVMGetEnumAttributeValue(LLVMLibrary.LLVMAttributeRef A);
  /**
   * Create a string attribute.<br>
   * Original signature : <code>
   * LLVMAttributeRef LLVMCreateStringAttribute(LLVMContextRef, const char*, unsigned, const char*, unsigned)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMCreateStringAttribute(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     java.lang.String, int, java.lang.String, int)} and {@link
   *     #LLVMCreateStringAttribute(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMAttributeRef LLVMCreateStringAttribute(
      LLVMLibrary.LLVMContextRef C, Pointer K, int KLength, Pointer V, int VLength);
  /**
   * Create a string attribute.<br>
   * Original signature : <code>
   * LLVMAttributeRef LLVMCreateStringAttribute(LLVMContextRef, const char*, unsigned, const char*, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMAttributeRef LLVMCreateStringAttribute(
      LLVMLibrary.LLVMContextRef C, String K, int KLength, String V, int VLength);
  /**
   * Get the string attribute's kind.<br>
   * Original signature : <code>char* LLVMGetStringAttributeKind(LLVMAttributeRef, unsigned*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetStringAttributeKind(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMAttributeRef,
   *     java.nio.IntBuffer)} and {@link
   *     #LLVMGetStringAttributeKind(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMAttributeRef,
   *     com.sun.jna.ptr.IntByReference)} instead
   */
  @Deprecated
  public static native String LLVMGetStringAttributeKind(
      LLVMLibrary.LLVMAttributeRef A, IntByReference Length);
  /**
   * Get the string attribute's kind.<br>
   * Original signature : <code>char* LLVMGetStringAttributeKind(LLVMAttributeRef, unsigned*)</code>
   */
  public static native String LLVMGetStringAttributeKind(
      LLVMLibrary.LLVMAttributeRef A, IntBuffer Length);
  /**
   * Get the string attribute's value.<br>
   * Original signature : <code>char* LLVMGetStringAttributeValue(LLVMAttributeRef, unsigned*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetStringAttributeValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMAttributeRef,
   *     java.nio.IntBuffer)} and {@link
   *     #LLVMGetStringAttributeValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMAttributeRef,
   *     com.sun.jna.ptr.IntByReference)} instead
   */
  @Deprecated
  public static native String LLVMGetStringAttributeValue(
      LLVMLibrary.LLVMAttributeRef A, IntByReference Length);
  /**
   * Get the string attribute's value.<br>
   * Original signature : <code>char* LLVMGetStringAttributeValue(LLVMAttributeRef, unsigned*)
   * </code>
   */
  public static native String LLVMGetStringAttributeValue(
      LLVMLibrary.LLVMAttributeRef A, IntBuffer Length);
  /**
   * Check for the different types of attributes.<br>
   * Original signature : <code>LLVMBool LLVMIsEnumAttribute(LLVMAttributeRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsEnumAttribute(LLVMLibrary.LLVMAttributeRef A);
  /** Original signature : <code>LLVMBool LLVMIsStringAttribute(LLVMAttributeRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMIsStringAttribute(LLVMLibrary.LLVMAttributeRef A);
  /**
   * Create a new, empty module in the global context.<br>
   * This is equivalent to calling LLVMModuleCreateWithNameInContext with<br>
   * LLVMGetGlobalContext() as the context parameter.<br>
   * Every invocation should be paired with LLVMDisposeModule() or memory<br>
   * will be leaked.<br>
   * Original signature : <code>LLVMModuleRef LLVMModuleCreateWithName(const char*)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMModuleCreateWithName(java.lang.String)} and
   *     {@link #LLVMModuleCreateWithName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithName(Pointer ModuleID);
  /**
   * Create a new, empty module in the global context.<br>
   * This is equivalent to calling LLVMModuleCreateWithNameInContext with<br>
   * LLVMGetGlobalContext() as the context parameter.<br>
   * Every invocation should be paired with LLVMDisposeModule() or memory<br>
   * will be leaked.<br>
   * Original signature : <code>LLVMModuleRef LLVMModuleCreateWithName(const char*)</code>
   */
  public static native LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithName(String ModuleID);
  /**
   * Create a new, empty module in a specific context.<br>
   * Every invocation should be paired with LLVMDisposeModule() or memory<br>
   * will be leaked.<br>
   * Original signature : <code>
   * LLVMModuleRef LLVMModuleCreateWithNameInContext(const char*, LLVMContextRef)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMModuleCreateWithNameInContext(java.lang.String,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef)} and {@link
   *     #LLVMModuleCreateWithNameInContext(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithNameInContext(
      Pointer ModuleID, LLVMLibrary.LLVMContextRef C);
  /**
   * Create a new, empty module in a specific context.<br>
   * Every invocation should be paired with LLVMDisposeModule() or memory<br>
   * will be leaked.<br>
   * Original signature : <code>
   * LLVMModuleRef LLVMModuleCreateWithNameInContext(const char*, LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMModuleRef LLVMModuleCreateWithNameInContext(
      String ModuleID, LLVMLibrary.LLVMContextRef C);
  /**
   * Return an exact copy of the specified module.<br>
   * Original signature : <code>LLVMModuleRef LLVMCloneModule(LLVMModuleRef)</code>
   */
  public static native LLVMLibrary.LLVMModuleRef LLVMCloneModule(LLVMLibrary.LLVMModuleRef M);
  /**
   * Destroy a module instance.<br>
   * This must be called for every created module or memory will be<br>
   * leaked.<br>
   * Original signature : <code>void LLVMDisposeModule(LLVMModuleRef)</code>
   */
  public static native void LLVMDisposeModule(LLVMLibrary.LLVMModuleRef M);
  /**
   * Obtain the identifier of a module.<br>
   *
   * @param M Module to obtain identifier of<br>
   * @param Len Out parameter which holds the length of the returned string.<br>
   * @return The identifier of M.<br>
   *     See Module::getModuleIdentifier()<br>
   *     Original signature : <code>char* LLVMGetModuleIdentifier(LLVMModuleRef, size_t*)</code>
   */
  public static native String LLVMGetModuleIdentifier(
      LLVMLibrary.LLVMModuleRef M, NativeSizeByReference Len);
  /**
   * Set the identifier of a module to a string Ident with length Len.<br>
   *
   * @param M The module to set identifier<br>
   * @param Ident The string to set M's identifier to<br>
   * @param Len Length of Ident<br>
   *     See Module::setModuleIdentifier()<br>
   *     Original signature : <code>void LLVMSetModuleIdentifier(LLVMModuleRef, const char*, size_t)
   *     </code><br>
   * @deprecated use the safer methods {@link
   *     #LLVMSetModuleIdentifier(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String, org.sosy_lab.llvm_j.binding.ext.NativeSize)} and {@link
   *     #LLVMSetModuleIdentifier(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer, org.sosy_lab.llvm_j.binding.ext.NativeSize)} instead
   */
  @Deprecated
  public static native void LLVMSetModuleIdentifier(
      LLVMLibrary.LLVMModuleRef M, Pointer Ident, NativeSize Len);
  /**
   * Set the identifier of a module to a string Ident with length Len.<br>
   *
   * @param M The module to set identifier<br>
   * @param Ident The string to set M's identifier to<br>
   * @param Len Length of Ident<br>
   *     See Module::setModuleIdentifier()<br>
   *     Original signature : <code>void LLVMSetModuleIdentifier(LLVMModuleRef, const char*, size_t)
   *     </code>
   */
  public static native void LLVMSetModuleIdentifier(
      LLVMLibrary.LLVMModuleRef M, String Ident, NativeSize Len);
  /**
   * Obtain the data layout for a module.<br>
   * See Module::getDataLayoutStr()<br>
   * LLVMGetDataLayout is DEPRECATED, as the name is not only incorrect,<br>
   * but match the name of another method on the module. Prefer the use<br>
   * of LLVMGetDataLayoutStr, which is not ambiguous.<br>
   * Original signature : <code>char* LLVMGetDataLayoutStr(LLVMModuleRef)</code>
   */
  public static native String LLVMGetDataLayoutStr(LLVMLibrary.LLVMModuleRef M);
  /** Original signature : <code>char* LLVMGetDataLayout(LLVMModuleRef)</code> */
  public static native String LLVMGetDataLayout(LLVMLibrary.LLVMModuleRef M);
  /**
   * Set the data layout for a module.<br>
   * See Module::setDataLayout()<br>
   * Original signature : <code>void LLVMSetDataLayout(LLVMModuleRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSetDataLayout(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String)} and {@link
   *     #LLVMSetDataLayout(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMSetDataLayout(LLVMLibrary.LLVMModuleRef M, Pointer DataLayoutStr);
  /**
   * Set the data layout for a module.<br>
   * See Module::setDataLayout()<br>
   * Original signature : <code>void LLVMSetDataLayout(LLVMModuleRef, const char*)</code>
   */
  public static native void LLVMSetDataLayout(LLVMLibrary.LLVMModuleRef M, String DataLayoutStr);
  /**
   * Obtain the target triple for a module.<br>
   * See Module::getTargetTriple()<br>
   * Original signature : <code>char* LLVMGetTarget(LLVMModuleRef)</code>
   */
  public static native String LLVMGetTarget(LLVMLibrary.LLVMModuleRef M);
  /**
   * Set the target triple for a module.<br>
   * See Module::setTargetTriple()<br>
   * Original signature : <code>void LLVMSetTarget(LLVMModuleRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSetTarget(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef, java.lang.String)}
   *     and {@link #LLVMSetTarget(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMSetTarget(LLVMLibrary.LLVMModuleRef M, Pointer Triple);
  /**
   * Set the target triple for a module.<br>
   * See Module::setTargetTriple()<br>
   * Original signature : <code>void LLVMSetTarget(LLVMModuleRef, const char*)</code>
   */
  public static native void LLVMSetTarget(LLVMLibrary.LLVMModuleRef M, String Triple);
  /**
   * Dump a representation of a module to stderr.<br>
   * See Module::dump()<br>
   * Original signature : <code>void LLVMDumpModule(LLVMModuleRef)</code>
   */
  public static native void LLVMDumpModule(LLVMLibrary.LLVMModuleRef M);
  /**
   * Print a representation of a module to a file. The ErrorMessage needs to be<br>
   * disposed with LLVMDisposeMessage. Returns 0 on success, 1 otherwise.<br>
   * See Module::print()<br>
   * Original signature : <code>LLVMBool LLVMPrintModuleToFile(LLVMModuleRef, const char*, char**)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPrintModuleToFile(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link
   *     #LLVMPrintModuleToFile(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBool LLVMPrintModuleToFile(
      LLVMLibrary.LLVMModuleRef M, Pointer Filename, PointerByReference ErrorMessage);
  /**
   * Print a representation of a module to a file. The ErrorMessage needs to be<br>
   * disposed with LLVMDisposeMessage. Returns 0 on success, 1 otherwise.<br>
   * See Module::print()<br>
   * Original signature : <code>LLVMBool LLVMPrintModuleToFile(LLVMModuleRef, const char*, char**)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMPrintModuleToFile(
      LLVMLibrary.LLVMModuleRef M, String Filename, PointerByReference ErrorMessage);
  /**
   * Return a string representation of the module. Use<br>
   * LLVMDisposeMessage to free the string.<br>
   * See Module::print()<br>
   * Original signature : <code>char* LLVMPrintModuleToString(LLVMModuleRef)</code>
   */
  public static native Pointer LLVMPrintModuleToString(LLVMLibrary.LLVMModuleRef M);
  /**
   * Set inline assembly for a module.<br>
   * See Module::setModuleInlineAsm()<br>
   * Original signature : <code>void LLVMSetModuleInlineAsm(LLVMModuleRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSetModuleInlineAsm(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String)} and {@link
   *     #LLVMSetModuleInlineAsm(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMSetModuleInlineAsm(LLVMLibrary.LLVMModuleRef M, Pointer Asm);
  /**
   * Set inline assembly for a module.<br>
   * See Module::setModuleInlineAsm()<br>
   * Original signature : <code>void LLVMSetModuleInlineAsm(LLVMModuleRef, const char*)</code>
   */
  public static native void LLVMSetModuleInlineAsm(LLVMLibrary.LLVMModuleRef M, String Asm);
  /**
   * Obtain the context to which this module is associated.<br>
   * See Module::getContext()<br>
   * Original signature : <code>LLVMContextRef LLVMGetModuleContext(LLVMModuleRef)</code>
   */
  public static native LLVMLibrary.LLVMContextRef LLVMGetModuleContext(LLVMLibrary.LLVMModuleRef M);
  /**
   * Obtain a Type from a module by its registered name.<br>
   * Original signature : <code>LLVMTypeRef LLVMGetTypeByName(LLVMModuleRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetTypeByName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String)} and {@link
   *     #LLVMGetTypeByName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMTypeRef LLVMGetTypeByName(
      LLVMLibrary.LLVMModuleRef M, Pointer Name);
  /**
   * Obtain a Type from a module by its registered name.<br>
   * Original signature : <code>LLVMTypeRef LLVMGetTypeByName(LLVMModuleRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMGetTypeByName(
      LLVMLibrary.LLVMModuleRef M, String Name);
  /**
   * Obtain the number of operands for named metadata in a module.<br>
   * See llvm::Module::getNamedMetadata()<br>
   * Original signature : <code>int LLVMGetNamedMetadataNumOperands(LLVMModuleRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetNamedMetadataNumOperands(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String)} and {@link
   *     #LLVMGetNamedMetadataNumOperands(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native int LLVMGetNamedMetadataNumOperands(
      LLVMLibrary.LLVMModuleRef M, Pointer Name);
  /**
   * Obtain the number of operands for named metadata in a module.<br>
   * See llvm::Module::getNamedMetadata()<br>
   * Original signature : <code>int LLVMGetNamedMetadataNumOperands(LLVMModuleRef, const char*)
   * </code>
   */
  public static native int LLVMGetNamedMetadataNumOperands(
      LLVMLibrary.LLVMModuleRef M, String Name);
  /**
   * Obtain the named metadata operands for a module.<br>
   * The passed LLVMValueRef pointer should refer to an array of<br>
   * LLVMValueRef at least LLVMGetNamedMetadataNumOperands long. This<br>
   * array will be populated with the LLVMValueRef instances. Each<br>
   * instance corresponds to a llvm::MDNode.<br>
   * See llvm::Module::getNamedMetadata()<br>
   * See llvm::MDNode::getOperand()<br>
   * Original signature : <code>
   * void LLVMGetNamedMetadataOperands(LLVMModuleRef, const char*, LLVMValueRef*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetNamedMetadataOperands(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef)} and {@link
   *     #LLVMGetNamedMetadataOperands(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef)} instead
   */
  @Deprecated
  public static native void LLVMGetNamedMetadataOperands(
      LLVMLibrary.LLVMModuleRef M, Pointer Name, LLVMLibrary.LLVMValueRef Dest);
  /**
   * Obtain the named metadata operands for a module.<br>
   * The passed LLVMValueRef pointer should refer to an array of<br>
   * LLVMValueRef at least LLVMGetNamedMetadataNumOperands long. This<br>
   * array will be populated with the LLVMValueRef instances. Each<br>
   * instance corresponds to a llvm::MDNode.<br>
   * See llvm::Module::getNamedMetadata()<br>
   * See llvm::MDNode::getOperand()<br>
   * Original signature : <code>
   * void LLVMGetNamedMetadataOperands(LLVMModuleRef, const char*, LLVMValueRef*)</code>
   */
  public static native void LLVMGetNamedMetadataOperands(
      LLVMLibrary.LLVMModuleRef M, String Name, LLVMLibrary.LLVMValueRef Dest);
  /**
   * Add an operand to named metadata.<br>
   * See llvm::Module::getNamedMetadata()<br>
   * See llvm::MDNode::addOperand()<br>
   * Original signature : <code>
   * void LLVMAddNamedMetadataOperand(LLVMModuleRef, const char*, LLVMValueRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAddNamedMetadataOperand(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef)} and {@link
   *     #LLVMAddNamedMetadataOperand(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef)} instead
   */
  @Deprecated
  public static native void LLVMAddNamedMetadataOperand(
      LLVMLibrary.LLVMModuleRef M, Pointer Name, LLVMLibrary.LLVMValueRef Val);
  /**
   * Add an operand to named metadata.<br>
   * See llvm::Module::getNamedMetadata()<br>
   * See llvm::MDNode::addOperand()<br>
   * Original signature : <code>
   * void LLVMAddNamedMetadataOperand(LLVMModuleRef, const char*, LLVMValueRef)</code>
   */
  public static native void LLVMAddNamedMetadataOperand(
      LLVMLibrary.LLVMModuleRef M, String Name, LLVMLibrary.LLVMValueRef Val);
  /**
   * Add a function to a module under a specified name.<br>
   * See llvm::Function::Create()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMAddFunction(LLVMModuleRef, const char*, LLVMTypeRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAddFunction(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef, java.lang.String,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} and {@link
   *     #LLVMAddFunction(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMAddFunction(
      LLVMLibrary.LLVMModuleRef M, Pointer Name, LLVMLibrary.LLVMTypeRef FunctionTy);
  /**
   * Add a function to a module under a specified name.<br>
   * See llvm::Function::Create()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMAddFunction(LLVMModuleRef, const char*, LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMAddFunction(
      LLVMLibrary.LLVMModuleRef M, String Name, LLVMLibrary.LLVMTypeRef FunctionTy);
  /**
   * Obtain a Function value from a Module by its name.<br>
   * The returned value corresponds to a llvm::Function value.<br>
   * See llvm::Module::getFunction()<br>
   * Original signature : <code>LLVMValueRef LLVMGetNamedFunction(LLVMModuleRef, const char*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetNamedFunction(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String)} and {@link
   *     #LLVMGetNamedFunction(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMGetNamedFunction(
      LLVMLibrary.LLVMModuleRef M, Pointer Name);
  /**
   * Obtain a Function value from a Module by its name.<br>
   * The returned value corresponds to a llvm::Function value.<br>
   * See llvm::Module::getFunction()<br>
   * Original signature : <code>LLVMValueRef LLVMGetNamedFunction(LLVMModuleRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetNamedFunction(
      LLVMLibrary.LLVMModuleRef M, String Name);
  /**
   * Obtain an iterator to the first Function in a Module.<br>
   * See llvm::Module::begin()<br>
   * Original signature : <code>LLVMValueRef LLVMGetFirstFunction(LLVMModuleRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetFirstFunction(LLVMLibrary.LLVMModuleRef M);
  /**
   * Obtain an iterator to the last Function in a Module.<br>
   * See llvm::Module::end()<br>
   * Original signature : <code>LLVMValueRef LLVMGetLastFunction(LLVMModuleRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetLastFunction(LLVMLibrary.LLVMModuleRef M);
  /**
   * Advance a Function iterator to the next Function.<br>
   * Returns NULL if the iterator was already at the end and there are no more<br>
   * functions.<br>
   * Original signature : <code>LLVMValueRef LLVMGetNextFunction(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetNextFunction(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Decrement a Function iterator to the previous Function.<br>
   * Returns NULL if the iterator was already at the beginning and there are<br>
   * no previous functions.<br>
   * Original signature : <code>LLVMValueRef LLVMGetPreviousFunction(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousFunction(
      LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain the enumerated type of a Type instance.<br>
   * See llvm::Type:getTypeID()<br>
   * Original signature : <code>LLVMTypeKind LLVMGetTypeKind(LLVMTypeRef)</code>
   */
  public static native int LLVMGetTypeKind(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Whether the type has a known size.<br>
   * Things that don't have a size are abstract types, labels, and void.a<br>
   * See llvm::Type::isSized()<br>
   * Original signature : <code>LLVMBool LLVMTypeIsSized(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMTypeIsSized(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Obtain the context to which this type instance is associated.<br>
   * See llvm::Type::getContext()<br>
   * Original signature : <code>LLVMContextRef LLVMGetTypeContext(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMContextRef LLVMGetTypeContext(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Dump a representation of a type to stderr.<br>
   * See llvm::Type::dump()<br>
   * Original signature : <code>void LLVMDumpType(LLVMTypeRef)</code>
   */
  public static native void LLVMDumpType(LLVMLibrary.LLVMTypeRef Val);
  /**
   * Return a string representation of the type. Use<br>
   * LLVMDisposeMessage to free the string.<br>
   * See llvm::Type::print()<br>
   * Original signature : <code>char* LLVMPrintTypeToString(LLVMTypeRef)</code>
   */
  public static native Pointer LLVMPrintTypeToString(LLVMLibrary.LLVMTypeRef Val);
  /**
   * Obtain an integer type from a context with specified bit width.<br>
   * Original signature : <code>LLVMTypeRef LLVMInt1TypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt1TypeInContext(LLVMLibrary.LLVMContextRef C);
  /** Original signature : <code>LLVMTypeRef LLVMInt8TypeInContext(LLVMContextRef)</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt8TypeInContext(LLVMLibrary.LLVMContextRef C);
  /** Original signature : <code>LLVMTypeRef LLVMInt16TypeInContext(LLVMContextRef)</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt16TypeInContext(LLVMLibrary.LLVMContextRef C);
  /** Original signature : <code>LLVMTypeRef LLVMInt32TypeInContext(LLVMContextRef)</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt32TypeInContext(LLVMLibrary.LLVMContextRef C);
  /** Original signature : <code>LLVMTypeRef LLVMInt64TypeInContext(LLVMContextRef)</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt64TypeInContext(LLVMLibrary.LLVMContextRef C);
  /** Original signature : <code>LLVMTypeRef LLVMInt128TypeInContext(LLVMContextRef)</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt128TypeInContext(
      LLVMLibrary.LLVMContextRef C);
  /**
   * Original signature : <code>LLVMTypeRef LLVMIntTypeInContext(LLVMContextRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMIntTypeInContext(
      LLVMLibrary.LLVMContextRef C, int NumBits);
  /**
   * Obtain an integer type from the global context with a specified bit<br>
   * width.<br>
   * Original signature : <code>LLVMTypeRef LLVMInt1Type()</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt1Type();
  /** Original signature : <code>LLVMTypeRef LLVMInt8Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt8Type();
  /** Original signature : <code>LLVMTypeRef LLVMInt16Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt16Type();
  /** Original signature : <code>LLVMTypeRef LLVMInt32Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt32Type();
  /** Original signature : <code>LLVMTypeRef LLVMInt64Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt64Type();
  /** Original signature : <code>LLVMTypeRef LLVMInt128Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMInt128Type();
  /** Original signature : <code>LLVMTypeRef LLVMIntType(unsigned)</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMIntType(int NumBits);
  /** Original signature : <code>int LLVMGetIntTypeWidth(LLVMTypeRef)</code> */
  public static native int LLVMGetIntTypeWidth(LLVMLibrary.LLVMTypeRef IntegerTy);
  /**
   * Obtain a 16-bit floating point type from a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMHalfTypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMHalfTypeInContext(LLVMLibrary.LLVMContextRef C);
  /**
   * Obtain a 32-bit floating point type from a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMFloatTypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMFloatTypeInContext(LLVMLibrary.LLVMContextRef C);
  /**
   * Obtain a 64-bit floating point type from a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMDoubleTypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMDoubleTypeInContext(
      LLVMLibrary.LLVMContextRef C);
  /**
   * Obtain a 80-bit floating point type (X87) from a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMX86FP80TypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMX86FP80TypeInContext(
      LLVMLibrary.LLVMContextRef C);
  /**
   * Obtain a 128-bit floating point type (112-bit mantissa) from a<br>
   * context.<br>
   * Original signature : <code>LLVMTypeRef LLVMFP128TypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMFP128TypeInContext(LLVMLibrary.LLVMContextRef C);
  /**
   * Obtain a 128-bit floating point type (two 64-bits) from a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMPPCFP128TypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMPPCFP128TypeInContext(
      LLVMLibrary.LLVMContextRef C);
  /**
   * Obtain a floating point type from the global context.<br>
   * These map to the functions in this group of the same name.<br>
   * Original signature : <code>LLVMTypeRef LLVMHalfType()</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMHalfType();
  /** Original signature : <code>LLVMTypeRef LLVMFloatType()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMFloatType();
  /** Original signature : <code>LLVMTypeRef LLVMDoubleType()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMDoubleType();
  /** Original signature : <code>LLVMTypeRef LLVMX86FP80Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMX86FP80Type();
  /** Original signature : <code>LLVMTypeRef LLVMFP128Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMFP128Type();
  /** Original signature : <code>LLVMTypeRef LLVMPPCFP128Type()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMPPCFP128Type();
  /**
   * Obtain a function type consisting of a specified signature.<br>
   * The function is defined as a tuple of a return Type, a list of<br>
   * parameter types, and whether the function is variadic.<br>
   * Original signature : <code>
   * LLVMTypeRef LLVMFunctionType(LLVMTypeRef, LLVMTypeRef*, unsigned, LLVMBool)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMFunctionType(
      LLVMLibrary.LLVMTypeRef ReturnType,
      LLVMLibrary.LLVMTypeRef ParamTypes,
      int ParamCount,
      LLVMLibrary.LLVMBool IsVarArg);
  /**
   * Returns whether a function type is variadic.<br>
   * Original signature : <code>LLVMBool LLVMIsFunctionVarArg(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsFunctionVarArg(
      LLVMLibrary.LLVMTypeRef FunctionTy);
  /**
   * Obtain the Type this function Type returns.<br>
   * Original signature : <code>LLVMTypeRef LLVMGetReturnType(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMGetReturnType(
      LLVMLibrary.LLVMTypeRef FunctionTy);
  /**
   * Obtain the number of parameters this function accepts.<br>
   * Original signature : <code>int LLVMCountParamTypes(LLVMTypeRef)</code>
   */
  public static native int LLVMCountParamTypes(LLVMLibrary.LLVMTypeRef FunctionTy);
  /**
   * Obtain the types of a function's parameters.<br>
   * The Dest parameter should point to a pre-allocated array of<br>
   * LLVMTypeRef at least LLVMCountParamTypes() large. On return, the<br>
   * first LLVMCountParamTypes() entries in the array will be populated<br>
   * with LLVMTypeRef instances.<br>
   *
   * @param FunctionTy The function type to operate on.<br>
   * @param Dest Memory address of an array to be filled with result.<br>
   *     Original signature : <code>void LLVMGetParamTypes(LLVMTypeRef, LLVMTypeRef*)</code>
   */
  public static native void LLVMGetParamTypes(
      LLVMLibrary.LLVMTypeRef FunctionTy, LLVMLibrary.LLVMTypeRef Dest);
  /**
   * Create a new structure type in a context.<br>
   * A structure is specified by a list of inner elements/types and<br>
   * whether these can be packed together.<br>
   * See llvm::StructType::create()<br>
   * Original signature : <code>
   * LLVMTypeRef LLVMStructTypeInContext(LLVMContextRef, LLVMTypeRef*, unsigned, LLVMBool)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMStructTypeInContext(
      LLVMLibrary.LLVMContextRef C,
      LLVMLibrary.LLVMTypeRef ElementTypes,
      int ElementCount,
      LLVMLibrary.LLVMBool Packed);
  /**
   * Create a new structure type in the global context.<br>
   * See llvm::StructType::create()<br>
   * Original signature : <code>LLVMTypeRef LLVMStructType(LLVMTypeRef*, unsigned, LLVMBool)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMStructType(
      LLVMLibrary.LLVMTypeRef ElementTypes, int ElementCount, LLVMLibrary.LLVMBool Packed);
  /**
   * Create an empty structure in a context having a specified name.<br>
   * See llvm::StructType::create()<br>
   * Original signature : <code>LLVMTypeRef LLVMStructCreateNamed(LLVMContextRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMStructCreateNamed(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     java.lang.String)} and {@link
   *     #LLVMStructCreateNamed(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMTypeRef LLVMStructCreateNamed(
      LLVMLibrary.LLVMContextRef C, Pointer Name);
  /**
   * Create an empty structure in a context having a specified name.<br>
   * See llvm::StructType::create()<br>
   * Original signature : <code>LLVMTypeRef LLVMStructCreateNamed(LLVMContextRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMStructCreateNamed(
      LLVMLibrary.LLVMContextRef C, String Name);
  /**
   * Obtain the name of a structure.<br>
   * See llvm::StructType::getName()<br>
   * Original signature : <code>char* LLVMGetStructName(LLVMTypeRef)</code>
   */
  public static native String LLVMGetStructName(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Set the contents of a structure type.<br>
   * See llvm::StructType::setBody()<br>
   * Original signature : <code>
   * void LLVMStructSetBody(LLVMTypeRef, LLVMTypeRef*, unsigned, LLVMBool)</code>
   */
  public static native void LLVMStructSetBody(
      LLVMLibrary.LLVMTypeRef StructTy,
      LLVMLibrary.LLVMTypeRef ElementTypes,
      int ElementCount,
      LLVMLibrary.LLVMBool Packed);
  /**
   * Get the number of elements defined inside the structure.<br>
   * See llvm::StructType::getNumElements()<br>
   * Original signature : <code>int LLVMCountStructElementTypes(LLVMTypeRef)</code>
   */
  public static native int LLVMCountStructElementTypes(LLVMLibrary.LLVMTypeRef StructTy);
  /**
   * Get the elements within a structure.<br>
   * The function is passed the address of a pre-allocated array of<br>
   * LLVMTypeRef at least LLVMCountStructElementTypes() long. After<br>
   * invocation, this array will be populated with the structure's<br>
   * elements. The objects in the destination array will have a lifetime<br>
   * of the structure type itself, which is the lifetime of the context it<br>
   * is contained in.<br>
   * Original signature : <code>void LLVMGetStructElementTypes(LLVMTypeRef, LLVMTypeRef*)</code>
   */
  public static native void LLVMGetStructElementTypes(
      LLVMLibrary.LLVMTypeRef StructTy, LLVMLibrary.LLVMTypeRef Dest);
  /**
   * Get the type of the element at a given index in the structure.<br>
   * See llvm::StructType::getTypeAtIndex()<br>
   * Original signature : <code>LLVMTypeRef LLVMStructGetTypeAtIndex(LLVMTypeRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMStructGetTypeAtIndex(
      LLVMLibrary.LLVMTypeRef StructTy, int i);
  /**
   * Determine whether a structure is packed.<br>
   * See llvm::StructType::isPacked()<br>
   * Original signature : <code>LLVMBool LLVMIsPackedStruct(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsPackedStruct(LLVMLibrary.LLVMTypeRef StructTy);
  /**
   * Determine whether a structure is opaque.<br>
   * See llvm::StructType::isOpaque()<br>
   * Original signature : <code>LLVMBool LLVMIsOpaqueStruct(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsOpaqueStruct(LLVMLibrary.LLVMTypeRef StructTy);
  /**
   * Obtain the type of elements within a sequential type.<br>
   * This works on array, vector, and pointer types.<br>
   * See llvm::SequentialType::getElementType()<br>
   * Original signature : <code>LLVMTypeRef LLVMGetElementType(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMGetElementType(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Create a fixed size array type that refers to a specific type.<br>
   * The created type will exist in the context that its element type<br>
   * exists in.<br>
   * See llvm::ArrayType::get()<br>
   * Original signature : <code>LLVMTypeRef LLVMArrayType(LLVMTypeRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMArrayType(
      LLVMLibrary.LLVMTypeRef ElementType, int ElementCount);
  /**
   * Obtain the length of an array type.<br>
   * This only works on types that represent arrays.<br>
   * See llvm::ArrayType::getNumElements()<br>
   * Original signature : <code>int LLVMGetArrayLength(LLVMTypeRef)</code>
   */
  public static native int LLVMGetArrayLength(LLVMLibrary.LLVMTypeRef ArrayTy);
  /**
   * Create a pointer type that points to a defined type.<br>
   * The created type will exist in the context that its pointee type<br>
   * exists in.<br>
   * See llvm::PointerType::get()<br>
   * Original signature : <code>LLVMTypeRef LLVMPointerType(LLVMTypeRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMPointerType(
      LLVMLibrary.LLVMTypeRef ElementType, int AddressSpace);
  /**
   * Obtain the address space of a pointer type.<br>
   * This only works on types that represent pointers.<br>
   * See llvm::PointerType::getAddressSpace()<br>
   * Original signature : <code>int LLVMGetPointerAddressSpace(LLVMTypeRef)</code>
   */
  public static native int LLVMGetPointerAddressSpace(LLVMLibrary.LLVMTypeRef PointerTy);
  /**
   * Create a vector type that contains a defined type and has a specific<br>
   * number of elements.<br>
   * The created type will exist in the context thats its element type<br>
   * exists in.<br>
   * See llvm::VectorType::get()<br>
   * Original signature : <code>LLVMTypeRef LLVMVectorType(LLVMTypeRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMVectorType(
      LLVMLibrary.LLVMTypeRef ElementType, int ElementCount);
  /**
   * Obtain the number of elements in a vector type.<br>
   * This only works on types that represent vectors.<br>
   * See llvm::VectorType::getNumElements()<br>
   * Original signature : <code>int LLVMGetVectorSize(LLVMTypeRef)</code>
   */
  public static native int LLVMGetVectorSize(LLVMLibrary.LLVMTypeRef VectorTy);
  /**
   * Create a void type in a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMVoidTypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMVoidTypeInContext(LLVMLibrary.LLVMContextRef C);
  /**
   * Create a label type in a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMLabelTypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMLabelTypeInContext(LLVMLibrary.LLVMContextRef C);
  /**
   * Create a X86 MMX type in a context.<br>
   * Original signature : <code>LLVMTypeRef LLVMX86MMXTypeInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMX86MMXTypeInContext(
      LLVMLibrary.LLVMContextRef C);
  /**
   * These are similar to the above functions except they operate on the<br>
   * global context.<br>
   * Original signature : <code>LLVMTypeRef LLVMVoidType()</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMVoidType();
  /** Original signature : <code>LLVMTypeRef LLVMLabelType()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMLabelType();
  /** Original signature : <code>LLVMTypeRef LLVMX86MMXType()</code> */
  public static native LLVMLibrary.LLVMTypeRef LLVMX86MMXType();
  /**
   * Obtain the type of a value.<br>
   * See llvm::Value::getType()<br>
   * Original signature : <code>LLVMTypeRef LLVMTypeOf(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMTypeOf(LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain the enumerated type of a Value instance.<br>
   * See llvm::Value::getValueID()<br>
   * Original signature : <code>LLVMValueKind LLVMGetValueKind(LLVMValueRef)</code>
   */
  public static native int LLVMGetValueKind(LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain the string name of a value.<br>
   * See llvm::Value::getName()<br>
   * Original signature : <code>char* LLVMGetValueName(LLVMValueRef)</code>
   */
  public static native String LLVMGetValueName(LLVMLibrary.LLVMValueRef Val);
  /**
   * Set the string name of a value.<br>
   * See llvm::Value::setName()<br>
   * Original signature : <code>void LLVMSetValueName(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSetValueName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)}
   *     and {@link #LLVMSetValueName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMSetValueName(LLVMLibrary.LLVMValueRef Val, Pointer Name);
  /**
   * Set the string name of a value.<br>
   * See llvm::Value::setName()<br>
   * Original signature : <code>void LLVMSetValueName(LLVMValueRef, const char*)</code>
   */
  public static native void LLVMSetValueName(LLVMLibrary.LLVMValueRef Val, String Name);
  /**
   * Dump a representation of a value to stderr.<br>
   * See llvm::Value::dump()<br>
   * Original signature : <code>void LLVMDumpValue(LLVMValueRef)</code>
   */
  public static native void LLVMDumpValue(LLVMLibrary.LLVMValueRef Val);
  /**
   * Return a string representation of the value. Use<br>
   * LLVMDisposeMessage to free the string.<br>
   * See llvm::Value::print()<br>
   * Original signature : <code>char* LLVMPrintValueToString(LLVMValueRef)</code>
   */
  public static native Pointer LLVMPrintValueToString(LLVMLibrary.LLVMValueRef Val);
  /**
   * Replace all uses of a value with another one.<br>
   * See llvm::Value::replaceAllUsesWith()<br>
   * Original signature : <code>void LLVMReplaceAllUsesWith(LLVMValueRef, LLVMValueRef)</code>
   */
  public static native void LLVMReplaceAllUsesWith(
      LLVMLibrary.LLVMValueRef OldVal, LLVMLibrary.LLVMValueRef NewVal);
  /**
   * Determine whether the specified value instance is constant.<br>
   * Original signature : <code>LLVMBool LLVMIsConstant(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsConstant(LLVMLibrary.LLVMValueRef Val);
  /**
   * Determine whether a value instance is undefined.<br>
   * Original signature : <code>LLVMBool LLVMIsUndef(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsUndef(LLVMLibrary.LLVMValueRef Val);
  /**
   * Convert value instances between types.<br>
   * Internally, an LLVMValueRef is "pinned" to a specific type. This<br>
   * series of functions allows you to cast an instance to a specific<br>
   * type.<br>
   * If the cast is not valid for the specified type, NULL is returned.<br>
   * See llvm::dyn_cast_or_null&lt;&gt;<br>
   * Original signature : <code>LLVMValueRef LLVMIsAArgument(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAArgument(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsABasicBlock(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsABasicBlock(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAInlineAsm(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAInlineAsm(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAUser(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAUser(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstant(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstant(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsABlockAddress(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsABlockAddress(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantAggregateZero(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantAggregateZero(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantArray(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantArray(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantDataSequential(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantDataSequential(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantDataArray(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantDataArray(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantDataVector(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantDataVector(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantExpr(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantExpr(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantFP(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantFP(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantInt(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantInt(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantPointerNull(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantPointerNull(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantStruct(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantStruct(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantTokenNone(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantTokenNone(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAConstantVector(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAConstantVector(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAGlobalValue(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAGlobalValue(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAGlobalAlias(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAGlobalAlias(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAGlobalObject(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAGlobalObject(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAFunction(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAFunction(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAGlobalVariable(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAGlobalVariable(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAUndefValue(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAUndefValue(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAInstruction(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAInstruction(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsABinaryOperator(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsABinaryOperator(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsACallInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsACallInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAIntrinsicInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAIntrinsicInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsADbgInfoIntrinsic(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsADbgInfoIntrinsic(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsADbgDeclareInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsADbgDeclareInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAMemIntrinsic(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAMemIntrinsic(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAMemCpyInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAMemCpyInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAMemMoveInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAMemMoveInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAMemSetInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAMemSetInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsACmpInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsACmpInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAFCmpInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAFCmpInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAICmpInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAICmpInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAExtractElementInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAExtractElementInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAGetElementPtrInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAGetElementPtrInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAInsertElementInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAInsertElementInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAInsertValueInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAInsertValueInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsALandingPadInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsALandingPadInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAPHINode(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAPHINode(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsASelectInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsASelectInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAShuffleVectorInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAShuffleVectorInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAStoreInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAStoreInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsATerminatorInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsATerminatorInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsABranchInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsABranchInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAIndirectBrInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAIndirectBrInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAInvokeInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAInvokeInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAReturnInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAReturnInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsASwitchInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsASwitchInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAUnreachableInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAUnreachableInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAResumeInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAResumeInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsACleanupReturnInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsACleanupReturnInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsACatchReturnInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsACatchReturnInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAFuncletPadInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAFuncletPadInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsACatchPadInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsACatchPadInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsACleanupPadInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsACleanupPadInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAUnaryInstruction(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAUnaryInstruction(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAAllocaInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAAllocaInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsACastInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsACastInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAAddrSpaceCastInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAAddrSpaceCastInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsABitCastInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsABitCastInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAFPExtInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAFPExtInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAFPToSIInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAFPToSIInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAFPToUIInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAFPToUIInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAFPTruncInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAFPTruncInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAIntToPtrInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAIntToPtrInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAPtrToIntInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAPtrToIntInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsASExtInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsASExtInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsASIToFPInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsASIToFPInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsATruncInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsATruncInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAUIToFPInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAUIToFPInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAZExtInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAZExtInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAExtractValueInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAExtractValueInst(
      LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsALoadInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsALoadInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAVAArgInst(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAVAArgInst(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAMDNode(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAMDNode(LLVMLibrary.LLVMValueRef Val);
  /** Original signature : <code>LLVMValueRef LLVMIsAMDString(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMIsAMDString(LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain the first use of a value.<br>
   * Uses are obtained in an iterator fashion. First, call this function<br>
   * to obtain a reference to the first use. Then, call LLVMGetNextUse()<br>
   * on that instance and all subsequently obtained instances until<br>
   * LLVMGetNextUse() returns NULL.<br>
   * See llvm::Value::use_begin()<br>
   * Original signature : <code>LLVMUseRef LLVMGetFirstUse(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMUseRef LLVMGetFirstUse(LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain the next use of a value.<br>
   * This effectively advances the iterator. It returns NULL if you are on<br>
   * the final use and no more are available.<br>
   * Original signature : <code>LLVMUseRef LLVMGetNextUse(LLVMUseRef)</code>
   */
  public static native LLVMLibrary.LLVMUseRef LLVMGetNextUse(LLVMLibrary.LLVMUseRef U);
  /**
   * Obtain the user value for a user.<br>
   * The returned value corresponds to a llvm::User type.<br>
   * See llvm::Use::getUser()<br>
   * Original signature : <code>LLVMValueRef LLVMGetUser(LLVMUseRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetUser(LLVMLibrary.LLVMUseRef U);
  /**
   * Obtain the value this use corresponds to.<br>
   * See llvm::Use::get().<br>
   * Original signature : <code>LLVMValueRef LLVMGetUsedValue(LLVMUseRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetUsedValue(LLVMLibrary.LLVMUseRef U);
  /**
   * Obtain an operand at a specific index in a llvm::User value.<br>
   * See llvm::User::getOperand()<br>
   * Original signature : <code>LLVMValueRef LLVMGetOperand(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetOperand(
      LLVMLibrary.LLVMValueRef Val, int Index);
  /**
   * Obtain the use of an operand at a specific index in a llvm::User value.<br>
   * See llvm::User::getOperandUse()<br>
   * Original signature : <code>LLVMUseRef LLVMGetOperandUse(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMUseRef LLVMGetOperandUse(
      LLVMLibrary.LLVMValueRef Val, int Index);
  /**
   * Set an operand at a specific index in a llvm::User value.<br>
   * See llvm::User::setOperand()<br>
   * Original signature : <code>void LLVMSetOperand(LLVMValueRef, unsigned, LLVMValueRef)</code>
   */
  public static native void LLVMSetOperand(
      LLVMLibrary.LLVMValueRef User, int Index, LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain the number of operands in a llvm::User value.<br>
   * See llvm::User::getNumOperands()<br>
   * Original signature : <code>int LLVMGetNumOperands(LLVMValueRef)</code>
   */
  public static native int LLVMGetNumOperands(LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain a constant value referring to the null instance of a type.<br>
   * See llvm::Constant::getNullValue()<br>
   * all zeroes<br>
   * Original signature : <code>LLVMValueRef LLVMConstNull(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNull(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Obtain a constant value referring to the instance of a type<br>
   * consisting of all ones.<br>
   * This is only valid for integer types.<br>
   * See llvm::Constant::getAllOnesValue()<br>
   * Original signature : <code>LLVMValueRef LLVMConstAllOnes(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstAllOnes(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Obtain a constant value referring to an undefined value of a type.<br>
   * See llvm::UndefValue::get()<br>
   * Original signature : <code>LLVMValueRef LLVMGetUndef(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetUndef(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Determine whether a value instance is null.<br>
   * See llvm::Constant::isNullValue()<br>
   * Original signature : <code>LLVMBool LLVMIsNull(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsNull(LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain a constant that is a constant pointer pointing to NULL for a<br>
   * specified type.<br>
   * Original signature : <code>LLVMValueRef LLVMConstPointerNull(LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstPointerNull(LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Obtain a constant value for an integer type.<br>
   * The returned value corresponds to a llvm::ConstantInt.<br>
   * See llvm::ConstantInt::get()<br>
   *
   * @param IntTy Integer type to obtain value of.<br>
   * @param N The value the returned instance should refer to.<br>
   * @param SignExtend Whether to sign extend the produced value.<br>
   *     Original signature : <code>
   *     LLVMValueRef LLVMConstInt(LLVMTypeRef, unsigned long long, LLVMBool)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstInt(
      LLVMLibrary.LLVMTypeRef IntTy, long N, LLVMLibrary.LLVMBool SignExtend);
  /**
   * Obtain a constant value for an integer of arbitrary precision.<br>
   * See llvm::ConstantInt::get()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstIntOfArbitraryPrecision(LLVMTypeRef, unsigned, const uint64_t[])</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstIntOfArbitraryPrecision(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, int,
   *     long[])} and {@link
   *     #LLVMConstIntOfArbitraryPrecision(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, int,
   *     com.sun.jna.ptr.LongByReference)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfArbitraryPrecision(
      LLVMLibrary.LLVMTypeRef IntTy, int NumWords, LongByReference Words);
  /**
   * Obtain a constant value for an integer of arbitrary precision.<br>
   * See llvm::ConstantInt::get()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstIntOfArbitraryPrecision(LLVMTypeRef, unsigned, const uint64_t[])</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfArbitraryPrecision(
      LLVMLibrary.LLVMTypeRef IntTy, int NumWords, long Words[]);
  /**
   * Obtain a constant value for an integer parsed from a string.<br>
   * A similar API, LLVMConstIntOfStringAndSize is also available. If the<br>
   * string's length is available, it is preferred to call that function<br>
   * instead.<br>
   * See llvm::ConstantInt::get()<br>
   * Original signature : <code>LLVMValueRef LLVMConstIntOfString(LLVMTypeRef, const char*, uint8_t)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstIntOfString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     java.lang.String, byte)} and {@link
   *     #LLVMConstIntOfString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer, byte)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfString(
      LLVMLibrary.LLVMTypeRef IntTy, Pointer Text, byte Radix);
  /**
   * Obtain a constant value for an integer parsed from a string.<br>
   * A similar API, LLVMConstIntOfStringAndSize is also available. If the<br>
   * string's length is available, it is preferred to call that function<br>
   * instead.<br>
   * See llvm::ConstantInt::get()<br>
   * Original signature : <code>LLVMValueRef LLVMConstIntOfString(LLVMTypeRef, const char*, uint8_t)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfString(
      LLVMLibrary.LLVMTypeRef IntTy, String Text, byte Radix);
  /**
   * Obtain a constant value for an integer parsed from a string with<br>
   * specified length.<br>
   * See llvm::ConstantInt::get()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstIntOfStringAndSize(LLVMTypeRef, const char*, unsigned, uint8_t)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstIntOfStringAndSize(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     java.lang.String, int, byte)} and {@link
   *     #LLVMConstIntOfStringAndSize(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer, int, byte)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfStringAndSize(
      LLVMLibrary.LLVMTypeRef IntTy, Pointer Text, int SLen, byte Radix);
  /**
   * Obtain a constant value for an integer parsed from a string with<br>
   * specified length.<br>
   * See llvm::ConstantInt::get()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstIntOfStringAndSize(LLVMTypeRef, const char*, unsigned, uint8_t)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntOfStringAndSize(
      LLVMLibrary.LLVMTypeRef IntTy, String Text, int SLen, byte Radix);
  /**
   * Obtain a constant value referring to a double floating point value.<br>
   * Original signature : <code>LLVMValueRef LLVMConstReal(LLVMTypeRef, double)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstReal(
      LLVMLibrary.LLVMTypeRef RealTy, double N);
  /**
   * Obtain a constant for a floating point value parsed from a string.<br>
   * A similar API, LLVMConstRealOfStringAndSize is also available. It<br>
   * should be used if the input string's length is known.<br>
   * Original signature : <code>LLVMValueRef LLVMConstRealOfString(LLVMTypeRef, const char*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstRealOfString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     java.lang.String)} and {@link
   *     #LLVMConstRealOfString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstRealOfString(
      LLVMLibrary.LLVMTypeRef RealTy, Pointer Text);
  /**
   * Obtain a constant for a floating point value parsed from a string.<br>
   * A similar API, LLVMConstRealOfStringAndSize is also available. It<br>
   * should be used if the input string's length is known.<br>
   * Original signature : <code>LLVMValueRef LLVMConstRealOfString(LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstRealOfString(
      LLVMLibrary.LLVMTypeRef RealTy, String Text);
  /**
   * Obtain a constant for a floating point value parsed from a string.<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstRealOfStringAndSize(LLVMTypeRef, const char*, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstRealOfStringAndSize(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     java.lang.String, int)} and {@link
   *     #LLVMConstRealOfStringAndSize(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstRealOfStringAndSize(
      LLVMLibrary.LLVMTypeRef RealTy, Pointer Text, int SLen);
  /**
   * Obtain a constant for a floating point value parsed from a string.<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstRealOfStringAndSize(LLVMTypeRef, const char*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstRealOfStringAndSize(
      LLVMLibrary.LLVMTypeRef RealTy, String Text, int SLen);
  /**
   * Obtain the zero extended value for an integer constant value.<br>
   * See llvm::ConstantInt::getZExtValue()<br>
   * Original signature : <code>long long LLVMConstIntGetZExtValue(LLVMValueRef)</code>
   */
  public static native long LLVMConstIntGetZExtValue(LLVMLibrary.LLVMValueRef ConstantVal);
  /**
   * Obtain the sign extended value for an integer constant value.<br>
   * See llvm::ConstantInt::getSExtValue()<br>
   * Original signature : <code>long long LLVMConstIntGetSExtValue(LLVMValueRef)</code>
   */
  public static native long LLVMConstIntGetSExtValue(LLVMLibrary.LLVMValueRef ConstantVal);
  /**
   * Obtain the double value for an floating point constant value.<br>
   * losesInfo indicates if some precision was lost in the conversion.<br>
   * See llvm::ConstantFP::getDoubleValue<br>
   * Original signature : <code>double LLVMConstRealGetDouble(LLVMValueRef, LLVMBool*)</code>
   */
  public static native double LLVMConstRealGetDouble(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMBool losesInfo);
  /**
   * Create a ConstantDataSequential and initialize it with a string.<br>
   * See llvm::ConstantDataArray::getString()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstStringInContext(LLVMContextRef, const char*, unsigned, LLVMBool)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstStringInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     java.lang.String, int, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMConstStringInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     com.sun.jna.Pointer, int, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstStringInContext(
      LLVMLibrary.LLVMContextRef C,
      Pointer Str,
      int Length,
      LLVMLibrary.LLVMBool DontNullTerminate);
  /**
   * Create a ConstantDataSequential and initialize it with a string.<br>
   * See llvm::ConstantDataArray::getString()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstStringInContext(LLVMContextRef, const char*, unsigned, LLVMBool)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstStringInContext(
      LLVMLibrary.LLVMContextRef C, String Str, int Length, LLVMLibrary.LLVMBool DontNullTerminate);
  /**
   * Create a ConstantDataSequential with string content in the global context.<br>
   * This is the same as LLVMConstStringInContext except it operates on the<br>
   * global context.<br>
   * See LLVMConstStringInContext()<br>
   * See llvm::ConstantDataArray::getString()<br>
   * Original signature : <code>LLVMValueRef LLVMConstString(const char*, unsigned, LLVMBool)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link #LLVMConstString(java.lang.String, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMConstString(com.sun.jna.Pointer, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstString(
      Pointer Str, int Length, LLVMLibrary.LLVMBool DontNullTerminate);
  /**
   * Create a ConstantDataSequential with string content in the global context.<br>
   * This is the same as LLVMConstStringInContext except it operates on the<br>
   * global context.<br>
   * See LLVMConstStringInContext()<br>
   * See llvm::ConstantDataArray::getString()<br>
   * Original signature : <code>LLVMValueRef LLVMConstString(const char*, unsigned, LLVMBool)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstString(
      String Str, int Length, LLVMLibrary.LLVMBool DontNullTerminate);
  /**
   * Returns true if the specified constant is an array of i8.<br>
   * See ConstantDataSequential::getAsString()<br>
   * Original signature : <code>LLVMBool LLVMIsConstantString(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsConstantString(LLVMLibrary.LLVMValueRef c);
  /**
   * Get the given constant data sequential as a string.<br>
   * See ConstantDataSequential::getAsString()<br>
   * Original signature : <code>char* LLVMGetAsString(LLVMValueRef, size_t*)</code>
   */
  public static native String LLVMGetAsString(
      LLVMLibrary.LLVMValueRef c, NativeSizeByReference Length);
  /**
   * Create an anonymous ConstantStruct with the specified values.<br>
   * See llvm::ConstantStruct::getAnon()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstStructInContext(LLVMContextRef, LLVMValueRef*, unsigned, LLVMBool)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstStructInContext(
      LLVMLibrary.LLVMContextRef C,
      LLVMLibrary.LLVMValueRef ConstantVals,
      int Count,
      LLVMLibrary.LLVMBool Packed);
  /**
   * Create a ConstantStruct in the global Context.<br>
   * This is the same as LLVMConstStructInContext except it operates on the<br>
   * global Context.<br>
   * See LLVMConstStructInContext()<br>
   * Original signature : <code>LLVMValueRef LLVMConstStruct(LLVMValueRef*, unsigned, LLVMBool)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstStruct(
      LLVMLibrary.LLVMValueRef ConstantVals, int Count, LLVMLibrary.LLVMBool Packed);
  /**
   * Create a ConstantArray from values.<br>
   * See llvm::ConstantArray::get()<br>
   * Original signature : <code>LLVMValueRef LLVMConstArray(LLVMTypeRef, LLVMValueRef*, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstArray(
      LLVMLibrary.LLVMTypeRef ElementTy, LLVMLibrary.LLVMValueRef ConstantVals, int Length);
  /**
   * Create a non-anonymous ConstantStruct from values.<br>
   * See llvm::ConstantStruct::get()<br>
   * Original signature : <code>
   * LLVMValueRef LLVMConstNamedStruct(LLVMTypeRef, LLVMValueRef*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNamedStruct(
      LLVMLibrary.LLVMTypeRef StructTy, LLVMLibrary.LLVMValueRef ConstantVals, int Count);
  /**
   * Get an element at specified index as a constant.<br>
   * See ConstantDataSequential::getElementAsConstant()<br>
   * Original signature : <code>LLVMValueRef LLVMGetElementAsConstant(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetElementAsConstant(
      LLVMLibrary.LLVMValueRef C, int idx);
  /**
   * Create a ConstantVector from values.<br>
   * See llvm::ConstantVector::get()<br>
   * Original signature : <code>LLVMValueRef LLVMConstVector(LLVMValueRef*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstVector(
      LLVMLibrary.LLVMValueRef ScalarConstantVals, int Size);
  /**
   * Functions in this group correspond to APIs on llvm::ConstantExpr.<br>
   * See llvm::ConstantExpr.<br>
   * Original signature : <code>LLVMOpcode LLVMGetConstOpcode(LLVMValueRef)</code>
   */
  public static native int LLVMGetConstOpcode(LLVMLibrary.LLVMValueRef ConstantVal);
  /** Original signature : <code>LLVMValueRef LLVMAlignOf(LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMAlignOf(LLVMLibrary.LLVMTypeRef Ty);
  /** Original signature : <code>LLVMValueRef LLVMSizeOf(LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMSizeOf(LLVMLibrary.LLVMTypeRef Ty);
  /** Original signature : <code>LLVMValueRef LLVMConstNeg(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNeg(LLVMLibrary.LLVMValueRef ConstantVal);
  /** Original signature : <code>LLVMValueRef LLVMConstNSWNeg(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNSWNeg(
      LLVMLibrary.LLVMValueRef ConstantVal);
  /** Original signature : <code>LLVMValueRef LLVMConstNUWNeg(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNUWNeg(
      LLVMLibrary.LLVMValueRef ConstantVal);
  /** Original signature : <code>LLVMValueRef LLVMConstFNeg(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFNeg(LLVMLibrary.LLVMValueRef ConstantVal);
  /** Original signature : <code>LLVMValueRef LLVMConstNot(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNot(LLVMLibrary.LLVMValueRef ConstantVal);
  /** Original signature : <code>LLVMValueRef LLVMConstAdd(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstAdd(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstNSWAdd(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNSWAdd(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstNUWAdd(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNUWAdd(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstFAdd(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFAdd(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstSub(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstSub(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstNSWSub(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNSWSub(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstNUWSub(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNUWSub(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstFSub(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFSub(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstMul(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstMul(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstNSWMul(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNSWMul(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstNUWMul(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstNUWMul(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstFMul(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFMul(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstUDiv(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstUDiv(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstSDiv(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstSDiv(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstExactSDiv(LLVMValueRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstExactSDiv(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstFDiv(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFDiv(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstURem(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstURem(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstSRem(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstSRem(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstFRem(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFRem(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstAnd(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstAnd(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstOr(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstOr(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstXor(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstXor(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstICmp(LLVMIntPredicate, LLVMValueRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstICmp(
      int Predicate, LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstFCmp(LLVMRealPredicate, LLVMValueRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFCmp(
      int Predicate, LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstShl(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstShl(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstLShr(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstLShr(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /** Original signature : <code>LLVMValueRef LLVMConstAShr(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstAShr(
      LLVMLibrary.LLVMValueRef LHSConstant, LLVMLibrary.LLVMValueRef RHSConstant);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstGEP(LLVMValueRef, LLVMValueRef*, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstGEP(
      LLVMLibrary.LLVMValueRef ConstantVal,
      LLVMLibrary.LLVMValueRef ConstantIndices,
      int NumIndices);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstInBoundsGEP(LLVMValueRef, LLVMValueRef*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstInBoundsGEP(
      LLVMLibrary.LLVMValueRef ConstantVal,
      LLVMLibrary.LLVMValueRef ConstantIndices,
      int NumIndices);
  /** Original signature : <code>LLVMValueRef LLVMConstTrunc(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstTrunc(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstSExt(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstSExt(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstZExt(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstZExt(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstFPTrunc(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFPTrunc(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstFPExt(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFPExt(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstUIToFP(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstUIToFP(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstSIToFP(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstSIToFP(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstFPToUI(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFPToUI(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstFPToSI(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFPToSI(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstPtrToInt(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstPtrToInt(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstIntToPtr(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntToPtr(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /** Original signature : <code>LLVMValueRef LLVMConstBitCast(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstBitCast(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstAddrSpaceCast(LLVMValueRef, LLVMTypeRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstAddrSpaceCast(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstZExtOrBitCast(LLVMValueRef, LLVMTypeRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstZExtOrBitCast(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstSExtOrBitCast(LLVMValueRef, LLVMTypeRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstSExtOrBitCast(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstTruncOrBitCast(LLVMValueRef, LLVMTypeRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstTruncOrBitCast(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstPointerCast(LLVMValueRef, LLVMTypeRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstPointerCast(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstIntCast(LLVMValueRef, LLVMTypeRef, LLVMBool)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstIntCast(
      LLVMLibrary.LLVMValueRef ConstantVal,
      LLVMLibrary.LLVMTypeRef ToType,
      LLVMLibrary.LLVMBool isSigned);
  /** Original signature : <code>LLVMValueRef LLVMConstFPCast(LLVMValueRef, LLVMTypeRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMConstFPCast(
      LLVMLibrary.LLVMValueRef ConstantVal, LLVMLibrary.LLVMTypeRef ToType);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstSelect(LLVMValueRef, LLVMValueRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstSelect(
      LLVMLibrary.LLVMValueRef ConstantCondition,
      LLVMLibrary.LLVMValueRef ConstantIfTrue,
      LLVMLibrary.LLVMValueRef ConstantIfFalse);
  /**
   * Original signature : <code>LLVMValueRef LLVMConstExtractElement(LLVMValueRef, LLVMValueRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstExtractElement(
      LLVMLibrary.LLVMValueRef VectorConstant, LLVMLibrary.LLVMValueRef IndexConstant);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstInsertElement(LLVMValueRef, LLVMValueRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstInsertElement(
      LLVMLibrary.LLVMValueRef VectorConstant,
      LLVMLibrary.LLVMValueRef ElementValueConstant,
      LLVMLibrary.LLVMValueRef IndexConstant);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstShuffleVector(LLVMValueRef, LLVMValueRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstShuffleVector(
      LLVMLibrary.LLVMValueRef VectorAConstant,
      LLVMLibrary.LLVMValueRef VectorBConstant,
      LLVMLibrary.LLVMValueRef MaskConstant);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstExtractValue(LLVMValueRef, unsigned*, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstExtractValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     java.nio.IntBuffer, int)} and {@link
   *     #LLVMConstExtractValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.ptr.IntByReference, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstExtractValue(
      LLVMLibrary.LLVMValueRef AggConstant, IntByReference IdxList, int NumIdx);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstExtractValue(LLVMValueRef, unsigned*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstExtractValue(
      LLVMLibrary.LLVMValueRef AggConstant, IntBuffer IdxList, int NumIdx);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstInsertValue(LLVMValueRef, LLVMValueRef, unsigned*, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstInsertValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.nio.IntBuffer, int)} and {@link
   *     #LLVMConstInsertValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.ptr.IntByReference, int)}
   *     instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstInsertValue(
      LLVMLibrary.LLVMValueRef AggConstant,
      LLVMLibrary.LLVMValueRef ElementValueConstant,
      IntByReference IdxList,
      int NumIdx);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstInsertValue(LLVMValueRef, LLVMValueRef, unsigned*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstInsertValue(
      LLVMLibrary.LLVMValueRef AggConstant,
      LLVMLibrary.LLVMValueRef ElementValueConstant,
      IntBuffer IdxList,
      int NumIdx);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstInlineAsm(LLVMTypeRef, const char*, const char*, LLVMBool, LLVMBool)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMConstInlineAsm(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String,
   *     java.lang.String, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMConstInlineAsm(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer, com.sun.jna.Pointer, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMConstInlineAsm(
      LLVMLibrary.LLVMTypeRef Ty,
      Pointer AsmString,
      Pointer Constraints,
      LLVMLibrary.LLVMBool HasSideEffects,
      LLVMLibrary.LLVMBool IsAlignStack);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMConstInlineAsm(LLVMTypeRef, const char*, const char*, LLVMBool, LLVMBool)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMConstInlineAsm(
      LLVMLibrary.LLVMTypeRef Ty,
      String AsmString,
      String Constraints,
      LLVMLibrary.LLVMBool HasSideEffects,
      LLVMLibrary.LLVMBool IsAlignStack);
  /**
   * Original signature : <code>LLVMValueRef LLVMBlockAddress(LLVMValueRef, LLVMBasicBlockRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBlockAddress(
      LLVMLibrary.LLVMValueRef F, LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * This group contains functions that operate on global values. Functions in<br>
   * this group relate to functions in the llvm::GlobalValue class tree.<br>
   * See llvm::GlobalValue<br>
   * Original signature : <code>LLVMModuleRef LLVMGetGlobalParent(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMModuleRef LLVMGetGlobalParent(
      LLVMLibrary.LLVMValueRef Global);
  /** Original signature : <code>LLVMBool LLVMIsDeclaration(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMIsDeclaration(LLVMLibrary.LLVMValueRef Global);
  /** Original signature : <code>LLVMLinkage LLVMGetLinkage(LLVMValueRef)</code> */
  public static native int LLVMGetLinkage(LLVMLibrary.LLVMValueRef Global);
  /** Original signature : <code>void LLVMSetLinkage(LLVMValueRef, LLVMLinkage)</code> */
  public static native void LLVMSetLinkage(LLVMLibrary.LLVMValueRef Global, int Linkage);
  /** Original signature : <code>char* LLVMGetSection(LLVMValueRef)</code> */
  public static native String LLVMGetSection(LLVMLibrary.LLVMValueRef Global);
  /**
   * Original signature : <code>void LLVMSetSection(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSetSection(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)}
   *     and {@link #LLVMSetSection(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMSetSection(LLVMLibrary.LLVMValueRef Global, Pointer Section);
  /** Original signature : <code>void LLVMSetSection(LLVMValueRef, const char*)</code> */
  public static native void LLVMSetSection(LLVMLibrary.LLVMValueRef Global, String Section);
  /** Original signature : <code>LLVMVisibility LLVMGetVisibility(LLVMValueRef)</code> */
  public static native int LLVMGetVisibility(LLVMLibrary.LLVMValueRef Global);
  /** Original signature : <code>void LLVMSetVisibility(LLVMValueRef, LLVMVisibility)</code> */
  public static native void LLVMSetVisibility(LLVMLibrary.LLVMValueRef Global, int Viz);
  /** Original signature : <code>LLVMDLLStorageClass LLVMGetDLLStorageClass(LLVMValueRef)</code> */
  public static native int LLVMGetDLLStorageClass(LLVMLibrary.LLVMValueRef Global);
  /**
   * Original signature : <code>void LLVMSetDLLStorageClass(LLVMValueRef, LLVMDLLStorageClass)
   * </code>
   */
  public static native void LLVMSetDLLStorageClass(LLVMLibrary.LLVMValueRef Global, int Class);
  /** Original signature : <code>LLVMBool LLVMHasUnnamedAddr(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMHasUnnamedAddr(LLVMLibrary.LLVMValueRef Global);
  /** Original signature : <code>void LLVMSetUnnamedAddr(LLVMValueRef, LLVMBool)</code> */
  public static native void LLVMSetUnnamedAddr(
      LLVMLibrary.LLVMValueRef Global, LLVMLibrary.LLVMBool HasUnnamedAddr);
  /**
   * Obtain the preferred alignment of the value.<br>
   * See llvm::AllocaInst::getAlignment()<br>
   * See llvm::LoadInst::getAlignment()<br>
   * See llvm::StoreInst::getAlignment()<br>
   * See llvm::GlobalValue::getAlignment()<br>
   * Original signature : <code>int LLVMGetAlignment(LLVMValueRef)</code>
   */
  public static native int LLVMGetAlignment(LLVMLibrary.LLVMValueRef V);
  /**
   * Set the preferred alignment of the value.<br>
   * See llvm::AllocaInst::setAlignment()<br>
   * See llvm::LoadInst::setAlignment()<br>
   * See llvm::StoreInst::setAlignment()<br>
   * See llvm::GlobalValue::setAlignment()<br>
   * Original signature : <code>void LLVMSetAlignment(LLVMValueRef, unsigned)</code>
   */
  public static native void LLVMSetAlignment(LLVMLibrary.LLVMValueRef V, int Bytes);
  /**
   * This group contains functions that operate on global variable values.<br>
   * See llvm::GlobalVariable<br>
   * Original signature : <code>LLVMValueRef LLVMAddGlobal(LLVMModuleRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAddGlobal(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMAddGlobal(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMAddGlobal(
      LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, Pointer Name);
  /**
   * This group contains functions that operate on global variable values.<br>
   * See llvm::GlobalVariable<br>
   * Original signature : <code>LLVMValueRef LLVMAddGlobal(LLVMModuleRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMAddGlobal(
      LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMAddGlobalInAddressSpace(LLVMModuleRef, LLVMTypeRef, const char*, unsigned)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAddGlobalInAddressSpace(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String, int)} and {@link
   *     #LLVMAddGlobalInAddressSpace(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMAddGlobalInAddressSpace(
      LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, Pointer Name, int AddressSpace);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMAddGlobalInAddressSpace(LLVMModuleRef, LLVMTypeRef, const char*, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMAddGlobalInAddressSpace(
      LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTypeRef Ty, String Name, int AddressSpace);
  /**
   * Original signature : <code>LLVMValueRef LLVMGetNamedGlobal(LLVMModuleRef, const char*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetNamedGlobal(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String)} and {@link
   *     #LLVMGetNamedGlobal(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMGetNamedGlobal(
      LLVMLibrary.LLVMModuleRef M, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMGetNamedGlobal(LLVMModuleRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetNamedGlobal(
      LLVMLibrary.LLVMModuleRef M, String Name);
  /** Original signature : <code>LLVMValueRef LLVMGetFirstGlobal(LLVMModuleRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMGetFirstGlobal(LLVMLibrary.LLVMModuleRef M);
  /** Original signature : <code>LLVMValueRef LLVMGetLastGlobal(LLVMModuleRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMGetLastGlobal(LLVMLibrary.LLVMModuleRef M);
  /** Original signature : <code>LLVMValueRef LLVMGetNextGlobal(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMGetNextGlobal(
      LLVMLibrary.LLVMValueRef GlobalVar);
  /** Original signature : <code>LLVMValueRef LLVMGetPreviousGlobal(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousGlobal(
      LLVMLibrary.LLVMValueRef GlobalVar);
  /** Original signature : <code>void LLVMDeleteGlobal(LLVMValueRef)</code> */
  public static native void LLVMDeleteGlobal(LLVMLibrary.LLVMValueRef GlobalVar);
  /** Original signature : <code>LLVMValueRef LLVMGetInitializer(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMGetInitializer(
      LLVMLibrary.LLVMValueRef GlobalVar);
  /** Original signature : <code>void LLVMSetInitializer(LLVMValueRef, LLVMValueRef)</code> */
  public static native void LLVMSetInitializer(
      LLVMLibrary.LLVMValueRef GlobalVar, LLVMLibrary.LLVMValueRef ConstantVal);
  /** Original signature : <code>LLVMBool LLVMIsThreadLocal(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMIsThreadLocal(LLVMLibrary.LLVMValueRef GlobalVar);
  /** Original signature : <code>void LLVMSetThreadLocal(LLVMValueRef, LLVMBool)</code> */
  public static native void LLVMSetThreadLocal(
      LLVMLibrary.LLVMValueRef GlobalVar, LLVMLibrary.LLVMBool IsThreadLocal);
  /** Original signature : <code>LLVMBool LLVMIsGlobalConstant(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMIsGlobalConstant(
      LLVMLibrary.LLVMValueRef GlobalVar);
  /** Original signature : <code>void LLVMSetGlobalConstant(LLVMValueRef, LLVMBool)</code> */
  public static native void LLVMSetGlobalConstant(
      LLVMLibrary.LLVMValueRef GlobalVar, LLVMLibrary.LLVMBool IsConstant);
  /** Original signature : <code>LLVMThreadLocalMode LLVMGetThreadLocalMode(LLVMValueRef)</code> */
  public static native int LLVMGetThreadLocalMode(LLVMLibrary.LLVMValueRef GlobalVar);
  /**
   * Original signature : <code>void LLVMSetThreadLocalMode(LLVMValueRef, LLVMThreadLocalMode)
   * </code>
   */
  public static native void LLVMSetThreadLocalMode(LLVMLibrary.LLVMValueRef GlobalVar, int Mode);
  /** Original signature : <code>LLVMBool LLVMIsExternallyInitialized(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMIsExternallyInitialized(
      LLVMLibrary.LLVMValueRef GlobalVar);
  /** Original signature : <code>void LLVMSetExternallyInitialized(LLVMValueRef, LLVMBool)</code> */
  public static native void LLVMSetExternallyInitialized(
      LLVMLibrary.LLVMValueRef GlobalVar, LLVMLibrary.LLVMBool IsExtInit);
  /**
   * This group contains function that operate on global alias values.<br>
   * See llvm::GlobalAlias<br>
   * Original signature : <code>
   * LLVMValueRef LLVMAddAlias(LLVMModuleRef, LLVMTypeRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAddAlias(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMAddAlias(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMAddAlias(
      LLVMLibrary.LLVMModuleRef M,
      LLVMLibrary.LLVMTypeRef Ty,
      LLVMLibrary.LLVMValueRef Aliasee,
      Pointer Name);
  /**
   * This group contains function that operate on global alias values.<br>
   * See llvm::GlobalAlias<br>
   * Original signature : <code>
   * LLVMValueRef LLVMAddAlias(LLVMModuleRef, LLVMTypeRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMAddAlias(
      LLVMLibrary.LLVMModuleRef M,
      LLVMLibrary.LLVMTypeRef Ty,
      LLVMLibrary.LLVMValueRef Aliasee,
      String Name);
  /**
   * Remove a function from its containing module and deletes it.<br>
   * See llvm::Function::eraseFromParent()<br>
   * Original signature : <code>void LLVMDeleteFunction(LLVMValueRef)</code>
   */
  public static native void LLVMDeleteFunction(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Check whether the given function has a personality function.<br>
   * See llvm::Function::hasPersonalityFn()<br>
   * Original signature : <code>LLVMBool LLVMHasPersonalityFn(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMHasPersonalityFn(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain the personality function attached to the function.<br>
   * See llvm::Function::getPersonalityFn()<br>
   * Original signature : <code>LLVMValueRef LLVMGetPersonalityFn(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetPersonalityFn(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Set the personality function attached to the function.<br>
   * See llvm::Function::setPersonalityFn()<br>
   * Original signature : <code>void LLVMSetPersonalityFn(LLVMValueRef, LLVMValueRef)</code>
   */
  public static native void LLVMSetPersonalityFn(
      LLVMLibrary.LLVMValueRef Fn, LLVMLibrary.LLVMValueRef PersonalityFn);
  /**
   * Obtain the ID number from a function instance.<br>
   * See llvm::Function::getIntrinsicID()<br>
   * Original signature : <code>int LLVMGetIntrinsicID(LLVMValueRef)</code>
   */
  public static native int LLVMGetIntrinsicID(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain the calling function of a function.<br>
   * The returned value corresponds to the LLVMCallConv enumeration.<br>
   * See llvm::Function::getCallingConv()<br>
   * Original signature : <code>int LLVMGetFunctionCallConv(LLVMValueRef)</code>
   */
  public static native int LLVMGetFunctionCallConv(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Set the calling convention of a function.<br>
   * See llvm::Function::setCallingConv()<br>
   *
   * @param Fn Function to operate on<br>
   * @param CC LLVMCallConv to set calling convention to<br>
   *     Original signature : <code>void LLVMSetFunctionCallConv(LLVMValueRef, unsigned)</code>
   */
  public static native void LLVMSetFunctionCallConv(LLVMLibrary.LLVMValueRef Fn, int CC);
  /**
   * Obtain the name of the garbage collector to use during code<br>
   * generation.<br>
   * See llvm::Function::getGC()<br>
   * Original signature : <code>char* LLVMGetGC(LLVMValueRef)</code>
   */
  public static native String LLVMGetGC(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Define the garbage collector to use during code generation.<br>
   * See llvm::Function::setGC()<br>
   * Original signature : <code>void LLVMSetGC(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSetGC(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and
   *     {@link #LLVMSetGC(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMSetGC(LLVMLibrary.LLVMValueRef Fn, Pointer Name);
  /**
   * Define the garbage collector to use during code generation.<br>
   * See llvm::Function::setGC()<br>
   * Original signature : <code>void LLVMSetGC(LLVMValueRef, const char*)</code>
   */
  public static native void LLVMSetGC(LLVMLibrary.LLVMValueRef Fn, String Name);
  /**
   * Add an attribute to a function.<br>
   * See llvm::Function::addAttribute()<br>
   * Original signature : <code>void LLVMAddFunctionAttr(LLVMValueRef, LLVMAttribute)</code>
   */
  public static native void LLVMAddFunctionAttr(LLVMLibrary.LLVMValueRef Fn, int PA);
  /**
   * Original signature : <code>
   * void LLVMAddAttributeAtIndex(LLVMValueRef, LLVMAttributeIndex, LLVMAttributeRef)</code>
   */
  public static native void LLVMAddAttributeAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, LLVMLibrary.LLVMAttributeRef A);
  /**
   * Original signature : <code>int LLVMGetAttributeCountAtIndex(LLVMValueRef, LLVMAttributeIndex)
   * </code>
   */
  public static native int LLVMGetAttributeCountAtIndex(LLVMLibrary.LLVMValueRef F, int Idx);
  /**
   * Original signature : <code>
   * void LLVMGetAttributesAtIndex(LLVMValueRef, LLVMAttributeIndex, LLVMAttributeRef*)</code>
   */
  public static native void LLVMGetAttributesAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, LLVMLibrary.LLVMAttributeRef Attrs);
  /**
   * Original signature : <code>
   * LLVMAttributeRef LLVMGetEnumAttributeAtIndex(LLVMValueRef, LLVMAttributeIndex, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMAttributeRef LLVMGetEnumAttributeAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, int KindID);
  /**
   * Original signature : <code>
   * LLVMAttributeRef LLVMGetStringAttributeAtIndex(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetStringAttributeAtIndex(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     java.lang.String, int)} and {@link
   *     #LLVMGetStringAttributeAtIndex(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMAttributeRef LLVMGetStringAttributeAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, Pointer K, int KLen);
  /**
   * Original signature : <code>
   * LLVMAttributeRef LLVMGetStringAttributeAtIndex(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMAttributeRef LLVMGetStringAttributeAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, String K, int KLen);
  /**
   * Original signature : <code>
   * void LLVMRemoveEnumAttributeAtIndex(LLVMValueRef, LLVMAttributeIndex, unsigned)</code>
   */
  public static native void LLVMRemoveEnumAttributeAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, int KindID);
  /**
   * Original signature : <code>
   * void LLVMRemoveStringAttributeAtIndex(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMRemoveStringAttributeAtIndex(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     int, java.lang.String, int)} and {@link
   *     #LLVMRemoveStringAttributeAtIndex(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     int, com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native void LLVMRemoveStringAttributeAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, Pointer K, int KLen);
  /**
   * Original signature : <code>
   * void LLVMRemoveStringAttributeAtIndex(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code>
   */
  public static native void LLVMRemoveStringAttributeAtIndex(
      LLVMLibrary.LLVMValueRef F, int Idx, String K, int KLen);
  /**
   * Add a target-dependent attribute to a function<br>
   * See llvm::AttrBuilder::addAttribute()<br>
   * Original signature : <code>
   * void LLVMAddTargetDependentFunctionAttr(LLVMValueRef, const char*, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAddTargetDependentFunctionAttr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     java.lang.String, java.lang.String)} and {@link
   *     #LLVMAddTargetDependentFunctionAttr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMAddTargetDependentFunctionAttr(
      LLVMLibrary.LLVMValueRef Fn, Pointer A, Pointer V);
  /**
   * Add a target-dependent attribute to a function<br>
   * See llvm::AttrBuilder::addAttribute()<br>
   * Original signature : <code>
   * void LLVMAddTargetDependentFunctionAttr(LLVMValueRef, const char*, const char*)</code>
   */
  public static native void LLVMAddTargetDependentFunctionAttr(
      LLVMLibrary.LLVMValueRef Fn, String A, String V);
  /**
   * Obtain an attribute from a function.<br>
   * See llvm::Function::getAttributes()<br>
   * Original signature : <code>LLVMAttribute LLVMGetFunctionAttr(LLVMValueRef)</code>
   */
  public static native int LLVMGetFunctionAttr(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Remove an attribute from a function.<br>
   * Original signature : <code>void LLVMRemoveFunctionAttr(LLVMValueRef, LLVMAttribute)</code>
   */
  public static native void LLVMRemoveFunctionAttr(LLVMLibrary.LLVMValueRef Fn, int PA);
  /**
   * Obtain the number of parameters in a function.<br>
   * See llvm::Function::arg_size()<br>
   * Original signature : <code>int LLVMCountParams(LLVMValueRef)</code>
   */
  public static native int LLVMCountParams(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain the parameters in a function.<br>
   * The takes a pointer to a pre-allocated array of LLVMValueRef that is<br>
   * at least LLVMCountParams() long. This array will be filled with<br>
   * LLVMValueRef instances which correspond to the parameters the<br>
   * function receives. Each LLVMValueRef corresponds to a llvm::Argument<br>
   * instance.<br>
   * See llvm::Function::arg_begin()<br>
   * Original signature : <code>void LLVMGetParams(LLVMValueRef, LLVMValueRef*)</code>
   */
  public static native void LLVMGetParams(
      LLVMLibrary.LLVMValueRef Fn, LLVMLibrary.LLVMValueRef Params);
  /**
   * Obtain the parameter at the specified index.<br>
   * Parameters are indexed from 0.<br>
   * See llvm::Function::arg_begin()<br>
   * Original signature : <code>LLVMValueRef LLVMGetParam(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetParam(
      LLVMLibrary.LLVMValueRef Fn, int Index);
  /**
   * Obtain the function to which this argument belongs.<br>
   * Unlike other functions in this group, this one takes an LLVMValueRef<br>
   * that corresponds to a llvm::Attribute.<br>
   * The returned LLVMValueRef is the llvm::Function to which this<br>
   * argument belongs.<br>
   * Original signature : <code>LLVMValueRef LLVMGetParamParent(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetParamParent(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the first parameter to a function.<br>
   * See llvm::Function::arg_begin()<br>
   * Original signature : <code>LLVMValueRef LLVMGetFirstParam(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetFirstParam(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain the last parameter to a function.<br>
   * See llvm::Function::arg_end()<br>
   * Original signature : <code>LLVMValueRef LLVMGetLastParam(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetLastParam(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain the next parameter to a function.<br>
   * This takes an LLVMValueRef obtained from LLVMGetFirstParam() (which is<br>
   * actually a wrapped iterator) and obtains the next parameter from the<br>
   * underlying iterator.<br>
   * Original signature : <code>LLVMValueRef LLVMGetNextParam(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetNextParam(LLVMLibrary.LLVMValueRef Arg);
  /**
   * Obtain the previous parameter to a function.<br>
   * This is the opposite of LLVMGetNextParam().<br>
   * Original signature : <code>LLVMValueRef LLVMGetPreviousParam(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousParam(LLVMLibrary.LLVMValueRef Arg);
  /**
   * Add an attribute to a function argument.<br>
   * See llvm::Argument::addAttr()<br>
   * Original signature : <code>void LLVMAddAttribute(LLVMValueRef, LLVMAttribute)</code>
   */
  public static native void LLVMAddAttribute(LLVMLibrary.LLVMValueRef Arg, int PA);
  /**
   * Remove an attribute from a function argument.<br>
   * See llvm::Argument::removeAttr()<br>
   * Original signature : <code>void LLVMRemoveAttribute(LLVMValueRef, LLVMAttribute)</code>
   */
  public static native void LLVMRemoveAttribute(LLVMLibrary.LLVMValueRef Arg, int PA);
  /**
   * Get an attribute from a function argument.<br>
   * Original signature : <code>LLVMAttribute LLVMGetAttribute(LLVMValueRef)</code>
   */
  public static native int LLVMGetAttribute(LLVMLibrary.LLVMValueRef Arg);
  /**
   * Set the alignment for a function parameter.<br>
   * See llvm::Argument::addAttr()<br>
   * See llvm::AttrBuilder::addAlignmentAttr()<br>
   * Original signature : <code>void LLVMSetParamAlignment(LLVMValueRef, unsigned)</code>
   */
  public static native void LLVMSetParamAlignment(LLVMLibrary.LLVMValueRef Arg, int Align);
  /**
   * Obtain a MDString value from a context.<br>
   * The returned instance corresponds to the llvm::MDString class.<br>
   * The instance is specified by string data of a specified length. The<br>
   * string content is copied, so the backing memory can be freed after<br>
   * this function returns.<br>
   * Original signature : <code>
   * LLVMValueRef LLVMMDStringInContext(LLVMContextRef, const char*, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMMDStringInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     java.lang.String, int)} and {@link
   *     #LLVMMDStringInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMMDStringInContext(
      LLVMLibrary.LLVMContextRef C, Pointer Str, int SLen);
  /**
   * Obtain a MDString value from a context.<br>
   * The returned instance corresponds to the llvm::MDString class.<br>
   * The instance is specified by string data of a specified length. The<br>
   * string content is copied, so the backing memory can be freed after<br>
   * this function returns.<br>
   * Original signature : <code>
   * LLVMValueRef LLVMMDStringInContext(LLVMContextRef, const char*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMMDStringInContext(
      LLVMLibrary.LLVMContextRef C, String Str, int SLen);
  /**
   * Obtain a MDString value from the global context.<br>
   * Original signature : <code>LLVMValueRef LLVMMDString(const char*, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMMDString(java.lang.String, int)} and {@link
   *     #LLVMMDString(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMMDString(Pointer Str, int SLen);
  /**
   * Obtain a MDString value from the global context.<br>
   * Original signature : <code>LLVMValueRef LLVMMDString(const char*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMMDString(String Str, int SLen);
  /**
   * Obtain a MDNode value from a context.<br>
   * The returned value corresponds to the llvm::MDNode class.<br>
   * Original signature : <code>
   * LLVMValueRef LLVMMDNodeInContext(LLVMContextRef, LLVMValueRef*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMMDNodeInContext(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMValueRef Vals, int Count);
  /**
   * Obtain a MDNode value from the global context.<br>
   * Original signature : <code>LLVMValueRef LLVMMDNode(LLVMValueRef*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMMDNode(
      LLVMLibrary.LLVMValueRef Vals, int Count);
  /**
   * Obtain the underlying string from a MDString value.<br>
   *
   * @param V Instance to obtain string from.<br>
   * @param Length Memory address which will hold length of returned string.<br>
   * @return String data in MDString.<br>
   *     Original signature : <code>char* LLVMGetMDString(LLVMValueRef, unsigned*)</code><br>
   * @deprecated use the safer methods {@link
   *     #LLVMGetMDString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.nio.IntBuffer)}
   *     and {@link #LLVMGetMDString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.ptr.IntByReference)} instead
   */
  @Deprecated
  public static native String LLVMGetMDString(LLVMLibrary.LLVMValueRef V, IntByReference Length);
  /**
   * Obtain the underlying string from a MDString value.<br>
   *
   * @param V Instance to obtain string from.<br>
   * @param Length Memory address which will hold length of returned string.<br>
   * @return String data in MDString.<br>
   *     Original signature : <code>char* LLVMGetMDString(LLVMValueRef, unsigned*)</code>
   */
  public static native String LLVMGetMDString(LLVMLibrary.LLVMValueRef V, IntBuffer Length);
  /**
   * Obtain the number of operands from an MDNode value.<br>
   *
   * @param V MDNode to get number of operands from.<br>
   * @return Number of operands of the MDNode.<br>
   *     Original signature : <code>int LLVMGetMDNodeNumOperands(LLVMValueRef)</code>
   */
  public static native int LLVMGetMDNodeNumOperands(LLVMLibrary.LLVMValueRef V);
  /**
   * Obtain the given MDNode's operands.<br>
   * The passed LLVMValueRef pointer should point to enough memory to hold all of<br>
   * the operands of the given MDNode (see LLVMGetMDNodeNumOperands) as<br>
   * LLVMValueRefs. This memory will be populated with the LLVMValueRefs of the<br>
   * MDNode's operands.<br>
   *
   * @param V MDNode to get the operands from.<br>
   * @param Dest Destination array for operands.<br>
   *     Original signature : <code>void LLVMGetMDNodeOperands(LLVMValueRef, LLVMValueRef*)</code>
   */
  public static native void LLVMGetMDNodeOperands(
      LLVMLibrary.LLVMValueRef V, LLVMLibrary.LLVMValueRef Dest);
  /**
   * Convert a basic block instance to a value type.<br>
   * Original signature : <code>LLVMValueRef LLVMBasicBlockAsValue(LLVMBasicBlockRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBasicBlockAsValue(
      LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Determine whether an LLVMValueRef is itself a basic block.<br>
   * Original signature : <code>LLVMBool LLVMValueIsBasicBlock(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMValueIsBasicBlock(LLVMLibrary.LLVMValueRef Val);
  /**
   * Convert an LLVMValueRef to an LLVMBasicBlockRef instance.<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMValueAsBasicBlock(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMValueAsBasicBlock(
      LLVMLibrary.LLVMValueRef Val);
  /**
   * Obtain the string name of a basic block.<br>
   * Original signature : <code>char* LLVMGetBasicBlockName(LLVMBasicBlockRef)</code>
   */
  public static native String LLVMGetBasicBlockName(LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Obtain the function to which a basic block belongs.<br>
   * See llvm::BasicBlock::getParent()<br>
   * Original signature : <code>LLVMValueRef LLVMGetBasicBlockParent(LLVMBasicBlockRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetBasicBlockParent(
      LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Obtain the terminator instruction for a basic block.<br>
   * If the basic block does not have a terminator (it is not well-formed<br>
   * if it doesn't), then NULL is returned.<br>
   * The returned LLVMValueRef corresponds to a llvm::TerminatorInst.<br>
   * See llvm::BasicBlock::getTerminator()<br>
   * Original signature : <code>LLVMValueRef LLVMGetBasicBlockTerminator(LLVMBasicBlockRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetBasicBlockTerminator(
      LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Obtain the number of basic blocks in a function.<br>
   *
   * @param Fn Function value to operate on.<br>
   *     Original signature : <code>int LLVMCountBasicBlocks(LLVMValueRef)</code>
   */
  public static native int LLVMCountBasicBlocks(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain all of the basic blocks in a function.<br>
   * This operates on a function value. The BasicBlocks parameter is a<br>
   * pointer to a pre-allocated array of LLVMBasicBlockRef of at least<br>
   * LLVMCountBasicBlocks() in length. This array is populated with<br>
   * LLVMBasicBlockRef instances.<br>
   * Original signature : <code>void LLVMGetBasicBlocks(LLVMValueRef, LLVMBasicBlockRef*)</code>
   */
  public static native void LLVMGetBasicBlocks(
      LLVMLibrary.LLVMValueRef Fn, LLVMLibrary.LLVMBasicBlockRef BasicBlocks);
  /**
   * Obtain the first basic block in a function.<br>
   * The returned basic block can be used as an iterator. You will likely<br>
   * eventually call into LLVMGetNextBasicBlock() with it.<br>
   * See llvm::Function::begin()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetFirstBasicBlock(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetFirstBasicBlock(
      LLVMLibrary.LLVMValueRef Fn);
  /**
   * Obtain the last basic block in a function.<br>
   * See llvm::Function::end()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetLastBasicBlock(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetLastBasicBlock(
      LLVMLibrary.LLVMValueRef Fn);
  /**
   * Advance a basic block iterator.<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetNextBasicBlock(LLVMBasicBlockRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetNextBasicBlock(
      LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Go backwards in a basic block iterator.<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetPreviousBasicBlock(LLVMBasicBlockRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetPreviousBasicBlock(
      LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Obtain the basic block that corresponds to the entry point of a<br>
   * function.<br>
   * See llvm::Function::getEntryBlock()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetEntryBasicBlock(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetEntryBasicBlock(
      LLVMLibrary.LLVMValueRef Fn);
  /**
   * Append a basic block to the end of a function.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>
   * LLVMBasicBlockRef LLVMAppendBasicBlockInContext(LLVMContextRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAppendBasicBlockInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMAppendBasicBlockInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlockInContext(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMValueRef Fn, Pointer Name);
  /**
   * Append a basic block to the end of a function.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>
   * LLVMBasicBlockRef LLVMAppendBasicBlockInContext(LLVMContextRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlockInContext(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMValueRef Fn, String Name);
  /**
   * Append a basic block to the end of a function using the global<br>
   * context.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMAppendBasicBlock(LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAppendBasicBlock(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     java.lang.String)} and {@link
   *     #LLVMAppendBasicBlock(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlock(
      LLVMLibrary.LLVMValueRef Fn, Pointer Name);
  /**
   * Append a basic block to the end of a function using the global<br>
   * context.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMAppendBasicBlock(LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMAppendBasicBlock(
      LLVMLibrary.LLVMValueRef Fn, String Name);
  /**
   * Insert a basic block in a function before another basic block.<br>
   * The function to add to is determined by the function of the<br>
   * passed basic block.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>
   * LLVMBasicBlockRef LLVMInsertBasicBlockInContext(LLVMContextRef, LLVMBasicBlockRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMInsertBasicBlockInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef, java.lang.String)} and {@link
   *     #LLVMInsertBasicBlockInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlockInContext(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMBasicBlockRef BB, Pointer Name);
  /**
   * Insert a basic block in a function before another basic block.<br>
   * The function to add to is determined by the function of the<br>
   * passed basic block.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>
   * LLVMBasicBlockRef LLVMInsertBasicBlockInContext(LLVMContextRef, LLVMBasicBlockRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlockInContext(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMBasicBlockRef BB, String Name);
  /**
   * Insert a basic block in a function using the global context.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>
   * LLVMBasicBlockRef LLVMInsertBasicBlock(LLVMBasicBlockRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMInsertBasicBlock(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef,
   *     java.lang.String)} and {@link
   *     #LLVMInsertBasicBlock(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlock(
      LLVMLibrary.LLVMBasicBlockRef InsertBeforeBB, Pointer Name);
  /**
   * Insert a basic block in a function using the global context.<br>
   * See llvm::BasicBlock::Create()<br>
   * Original signature : <code>
   * LLVMBasicBlockRef LLVMInsertBasicBlock(LLVMBasicBlockRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMInsertBasicBlock(
      LLVMLibrary.LLVMBasicBlockRef InsertBeforeBB, String Name);
  /**
   * Remove a basic block from a function and delete it.<br>
   * This deletes the basic block from its containing function and deletes<br>
   * the basic block itself.<br>
   * See llvm::BasicBlock::eraseFromParent()<br>
   * Original signature : <code>void LLVMDeleteBasicBlock(LLVMBasicBlockRef)</code>
   */
  public static native void LLVMDeleteBasicBlock(LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Remove a basic block from a function.<br>
   * This deletes the basic block from its containing function but keep<br>
   * the basic block alive.<br>
   * See llvm::BasicBlock::removeFromParent()<br>
   * Original signature : <code>void LLVMRemoveBasicBlockFromParent(LLVMBasicBlockRef)</code>
   */
  public static native void LLVMRemoveBasicBlockFromParent(LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Move a basic block to before another one.<br>
   * See llvm::BasicBlock::moveBefore()<br>
   * Original signature : <code>void LLVMMoveBasicBlockBefore(LLVMBasicBlockRef, LLVMBasicBlockRef)
   * </code>
   */
  public static native void LLVMMoveBasicBlockBefore(
      LLVMLibrary.LLVMBasicBlockRef BB, LLVMLibrary.LLVMBasicBlockRef MovePos);
  /**
   * Move a basic block to after another one.<br>
   * See llvm::BasicBlock::moveAfter()<br>
   * Original signature : <code>void LLVMMoveBasicBlockAfter(LLVMBasicBlockRef, LLVMBasicBlockRef)
   * </code>
   */
  public static native void LLVMMoveBasicBlockAfter(
      LLVMLibrary.LLVMBasicBlockRef BB, LLVMLibrary.LLVMBasicBlockRef MovePos);
  /**
   * Obtain the first instruction in a basic block.<br>
   * The returned LLVMValueRef corresponds to a llvm::Instruction<br>
   * instance.<br>
   * Original signature : <code>LLVMValueRef LLVMGetFirstInstruction(LLVMBasicBlockRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetFirstInstruction(
      LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Obtain the last instruction in a basic block.<br>
   * The returned LLVMValueRef corresponds to an LLVM:Instruction.<br>
   * Original signature : <code>LLVMValueRef LLVMGetLastInstruction(LLVMBasicBlockRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetLastInstruction(
      LLVMLibrary.LLVMBasicBlockRef BB);
  /**
   * Determine whether an instruction has any metadata attached.<br>
   * Original signature : <code>int LLVMHasMetadata(LLVMValueRef)</code>
   */
  public static native int LLVMHasMetadata(LLVMLibrary.LLVMValueRef Val);
  /**
   * Return metadata associated with an instruction value.<br>
   * Original signature : <code>LLVMValueRef LLVMGetMetadata(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetMetadata(
      LLVMLibrary.LLVMValueRef Val, int KindID);
  /**
   * Set metadata associated with an instruction value.<br>
   * Original signature : <code>void LLVMSetMetadata(LLVMValueRef, unsigned, LLVMValueRef)</code>
   */
  public static native void LLVMSetMetadata(
      LLVMLibrary.LLVMValueRef Val, int KindID, LLVMLibrary.LLVMValueRef Node);
  /**
   * Obtain the basic block to which an instruction belongs.<br>
   * See llvm::Instruction::getParent()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetInstructionParent(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetInstructionParent(
      LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the instruction that occurs after the one specified.<br>
   * The next instruction will be from the same basic block.<br>
   * If this is the last instruction in a basic block, NULL will be<br>
   * returned.<br>
   * Original signature : <code>LLVMValueRef LLVMGetNextInstruction(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetNextInstruction(
      LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the instruction that occurred before this one.<br>
   * If the instruction is the first instruction in a basic block, NULL<br>
   * will be returned.<br>
   * Original signature : <code>LLVMValueRef LLVMGetPreviousInstruction(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetPreviousInstruction(
      LLVMLibrary.LLVMValueRef Inst);
  /**
   * Remove and delete an instruction.<br>
   * The instruction specified is removed from its containing building<br>
   * block but is kept alive.<br>
   * See llvm::Instruction::removeFromParent()<br>
   * Original signature : <code>void LLVMInstructionRemoveFromParent(LLVMValueRef)</code>
   */
  public static native void LLVMInstructionRemoveFromParent(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Remove and delete an instruction.<br>
   * The instruction specified is removed from its containing building<br>
   * block and then deleted.<br>
   * See llvm::Instruction::eraseFromParent()<br>
   * Original signature : <code>void LLVMInstructionEraseFromParent(LLVMValueRef)</code>
   */
  public static native void LLVMInstructionEraseFromParent(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the code opcode for an individual instruction.<br>
   * See llvm::Instruction::getOpCode()<br>
   * Original signature : <code>LLVMOpcode LLVMGetInstructionOpcode(LLVMValueRef)</code>
   */
  public static native int LLVMGetInstructionOpcode(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the predicate of an instruction.<br>
   * This is only valid for instructions that correspond to llvm::ICmpInst<br>
   * or llvm::ConstantExpr whose opcode is llvm::Instruction::ICmp.<br>
   * See llvm::ICmpInst::getPredicate()<br>
   * Original signature : <code>LLVMIntPredicate LLVMGetICmpPredicate(LLVMValueRef)</code>
   */
  public static native int LLVMGetICmpPredicate(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the float predicate of an instruction.<br>
   * This is only valid for instructions that correspond to llvm::FCmpInst<br>
   * or llvm::ConstantExpr whose opcode is llvm::Instruction::FCmp.<br>
   * See llvm::FCmpInst::getPredicate()<br>
   * Original signature : <code>LLVMRealPredicate LLVMGetFCmpPredicate(LLVMValueRef)</code>
   */
  public static native int LLVMGetFCmpPredicate(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Create a copy of 'this' instruction that is identical in all ways<br>
   * except the following:<br>
   * The instruction has no parent<br>
   * The instruction has no name<br>
   * See llvm::Instruction::clone()<br>
   * Original signature : <code>LLVMValueRef LLVMInstructionClone(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMInstructionClone(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the argument count for a call instruction.<br>
   * This expects an LLVMValueRef that corresponds to a llvm::CallInst or<br>
   * llvm::InvokeInst.<br>
   * See llvm::CallInst::getNumArgOperands()<br>
   * See llvm::InvokeInst::getNumArgOperands()<br>
   * Original signature : <code>int LLVMGetNumArgOperands(LLVMValueRef)</code>
   */
  public static native int LLVMGetNumArgOperands(LLVMLibrary.LLVMValueRef Instr);
  /**
   * Set the calling convention for a call instruction.<br>
   * This expects an LLVMValueRef that corresponds to a llvm::CallInst or<br>
   * llvm::InvokeInst.<br>
   * See llvm::CallInst::setCallingConv()<br>
   * See llvm::InvokeInst::setCallingConv()<br>
   * Original signature : <code>void LLVMSetInstructionCallConv(LLVMValueRef, unsigned)</code>
   */
  public static native void LLVMSetInstructionCallConv(LLVMLibrary.LLVMValueRef Instr, int CC);
  /**
   * Obtain the calling convention for a call instruction.<br>
   * This is the opposite of LLVMSetInstructionCallConv(). Reads its<br>
   * usage.<br>
   * See LLVMSetInstructionCallConv()<br>
   * Original signature : <code>int LLVMGetInstructionCallConv(LLVMValueRef)</code>
   */
  public static native int LLVMGetInstructionCallConv(LLVMLibrary.LLVMValueRef Instr);
  /**
   * Original signature : <code>void LLVMAddInstrAttribute(LLVMValueRef, unsigned, LLVMAttribute)
   * </code>
   */
  public static native void LLVMAddInstrAttribute(
      LLVMLibrary.LLVMValueRef Instr, int index, int LLVMAttribute1);
  /**
   * Original signature : <code>void LLVMRemoveInstrAttribute(LLVMValueRef, unsigned, LLVMAttribute)
   * </code>
   */
  public static native void LLVMRemoveInstrAttribute(
      LLVMLibrary.LLVMValueRef Instr, int index, int LLVMAttribute1);
  /**
   * Original signature : <code>void LLVMSetInstrParamAlignment(LLVMValueRef, unsigned, unsigned)
   * </code>
   */
  public static native void LLVMSetInstrParamAlignment(
      LLVMLibrary.LLVMValueRef Instr, int index, int Align);
  /**
   * Original signature : <code>
   * void LLVMAddCallSiteAttribute(LLVMValueRef, LLVMAttributeIndex, LLVMAttributeRef)</code>
   */
  public static native void LLVMAddCallSiteAttribute(
      LLVMLibrary.LLVMValueRef C, int Idx, LLVMLibrary.LLVMAttributeRef A);
  /**
   * Original signature : <code>int LLVMGetCallSiteAttributeCount(LLVMValueRef, LLVMAttributeIndex)
   * </code>
   */
  public static native int LLVMGetCallSiteAttributeCount(LLVMLibrary.LLVMValueRef C, int Idx);
  /**
   * Original signature : <code>
   * void LLVMGetCallSiteAttributes(LLVMValueRef, LLVMAttributeIndex, LLVMAttributeRef*)</code>
   */
  public static native void LLVMGetCallSiteAttributes(
      LLVMLibrary.LLVMValueRef C, int Idx, LLVMLibrary.LLVMAttributeRef Attrs);
  /**
   * Original signature : <code>
   * LLVMAttributeRef LLVMGetCallSiteEnumAttribute(LLVMValueRef, LLVMAttributeIndex, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMAttributeRef LLVMGetCallSiteEnumAttribute(
      LLVMLibrary.LLVMValueRef C, int Idx, int KindID);
  /**
   * Original signature : <code>
   * LLVMAttributeRef LLVMGetCallSiteStringAttribute(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetCallSiteStringAttribute(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     java.lang.String, int)} and {@link
   *     #LLVMGetCallSiteStringAttribute(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMAttributeRef LLVMGetCallSiteStringAttribute(
      LLVMLibrary.LLVMValueRef C, int Idx, Pointer K, int KLen);
  /**
   * Original signature : <code>
   * LLVMAttributeRef LLVMGetCallSiteStringAttribute(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMAttributeRef LLVMGetCallSiteStringAttribute(
      LLVMLibrary.LLVMValueRef C, int Idx, String K, int KLen);
  /**
   * Original signature : <code>
   * void LLVMRemoveCallSiteEnumAttribute(LLVMValueRef, LLVMAttributeIndex, unsigned)</code>
   */
  public static native void LLVMRemoveCallSiteEnumAttribute(
      LLVMLibrary.LLVMValueRef C, int Idx, int KindID);
  /**
   * Original signature : <code>
   * void LLVMRemoveCallSiteStringAttribute(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMRemoveCallSiteStringAttribute(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     int, java.lang.String, int)} and {@link
   *     #LLVMRemoveCallSiteStringAttribute(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     int, com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native void LLVMRemoveCallSiteStringAttribute(
      LLVMLibrary.LLVMValueRef C, int Idx, Pointer K, int KLen);
  /**
   * Original signature : <code>
   * void LLVMRemoveCallSiteStringAttribute(LLVMValueRef, LLVMAttributeIndex, const char*, unsigned)
   * </code>
   */
  public static native void LLVMRemoveCallSiteStringAttribute(
      LLVMLibrary.LLVMValueRef C, int Idx, String K, int KLen);
  /**
   * Obtain the pointer to the function invoked by this instruction.<br>
   * This expects an LLVMValueRef that corresponds to a llvm::CallInst or<br>
   * llvm::InvokeInst.<br>
   * See llvm::CallInst::getCalledValue()<br>
   * See llvm::InvokeInst::getCalledValue()<br>
   * Original signature : <code>LLVMValueRef LLVMGetCalledValue(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetCalledValue(LLVMLibrary.LLVMValueRef Instr);
  /**
   * Obtain whether a call instruction is a tail call.<br>
   * This only works on llvm::CallInst instructions.<br>
   * See llvm::CallInst::isTailCall()<br>
   * Original signature : <code>LLVMBool LLVMIsTailCall(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsTailCall(LLVMLibrary.LLVMValueRef CallInst);
  /**
   * Set whether a call instruction is a tail call.<br>
   * This only works on llvm::CallInst instructions.<br>
   * See llvm::CallInst::setTailCall()<br>
   * Original signature : <code>void LLVMSetTailCall(LLVMValueRef, LLVMBool)</code>
   */
  public static native void LLVMSetTailCall(
      LLVMLibrary.LLVMValueRef CallInst, LLVMLibrary.LLVMBool IsTailCall);
  /**
   * Return the normal destination basic block.<br>
   * This only works on llvm::InvokeInst instructions.<br>
   * See llvm::InvokeInst::getNormalDest()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetNormalDest(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetNormalDest(
      LLVMLibrary.LLVMValueRef InvokeInst);
  /**
   * Return the unwind destination basic block.<br>
   * This only works on llvm::InvokeInst instructions.<br>
   * See llvm::InvokeInst::getUnwindDest()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetUnwindDest(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetUnwindDest(
      LLVMLibrary.LLVMValueRef InvokeInst);
  /**
   * Set the normal destination basic block.<br>
   * This only works on llvm::InvokeInst instructions.<br>
   * See llvm::InvokeInst::setNormalDest()<br>
   * Original signature : <code>void LLVMSetNormalDest(LLVMValueRef, LLVMBasicBlockRef)</code>
   */
  public static native void LLVMSetNormalDest(
      LLVMLibrary.LLVMValueRef InvokeInst, LLVMLibrary.LLVMBasicBlockRef B);
  /**
   * Set the unwind destination basic block.<br>
   * This only works on llvm::InvokeInst instructions.<br>
   * See llvm::InvokeInst::setUnwindDest()<br>
   * Original signature : <code>void LLVMSetUnwindDest(LLVMValueRef, LLVMBasicBlockRef)</code>
   */
  public static native void LLVMSetUnwindDest(
      LLVMLibrary.LLVMValueRef InvokeInst, LLVMLibrary.LLVMBasicBlockRef B);
  /**
   * Return the number of successors that this terminator has.<br>
   * See llvm::TerminatorInst::getNumSuccessors<br>
   * Original signature : <code>int LLVMGetNumSuccessors(LLVMValueRef)</code>
   */
  public static native int LLVMGetNumSuccessors(LLVMLibrary.LLVMValueRef Term);
  /**
   * Return the specified successor.<br>
   * See llvm::TerminatorInst::getSuccessor<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetSuccessor(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetSuccessor(
      LLVMLibrary.LLVMValueRef Term, int i);
  /**
   * Update the specified successor to point at the provided block.<br>
   * See llvm::TerminatorInst::setSuccessor<br>
   * Original signature : <code>void LLVMSetSuccessor(LLVMValueRef, unsigned, LLVMBasicBlockRef)
   * </code>
   */
  public static native void LLVMSetSuccessor(
      LLVMLibrary.LLVMValueRef Term, int i, LLVMLibrary.LLVMBasicBlockRef block);
  /**
   * Return if a branch is conditional.<br>
   * This only works on llvm::BranchInst instructions.<br>
   * See llvm::BranchInst::isConditional<br>
   * Original signature : <code>LLVMBool LLVMIsConditional(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsConditional(LLVMLibrary.LLVMValueRef Branch);
  /**
   * Return the condition of a branch instruction.<br>
   * This only works on llvm::BranchInst instructions.<br>
   * See llvm::BranchInst::getCondition<br>
   * Original signature : <code>LLVMValueRef LLVMGetCondition(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetCondition(LLVMLibrary.LLVMValueRef Branch);
  /**
   * Set the condition of a branch instruction.<br>
   * This only works on llvm::BranchInst instructions.<br>
   * See llvm::BranchInst::setCondition<br>
   * Original signature : <code>void LLVMSetCondition(LLVMValueRef, LLVMValueRef)</code>
   */
  public static native void LLVMSetCondition(
      LLVMLibrary.LLVMValueRef Branch, LLVMLibrary.LLVMValueRef Cond);
  /**
   * Obtain the default destination basic block of a switch instruction.<br>
   * This only works on llvm::SwitchInst instructions.<br>
   * See llvm::SwitchInst::getDefaultDest()<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetSwitchDefaultDest(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetSwitchDefaultDest(
      LLVMLibrary.LLVMValueRef SwitchInstr);
  /**
   * Obtain the type that is being allocated by the alloca instruction.<br>
   * Original signature : <code>LLVMTypeRef LLVMGetAllocatedType(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMGetAllocatedType(
      LLVMLibrary.LLVMValueRef Alloca);
  /**
   * Check whether the given GEP instruction is inbounds.<br>
   * Original signature : <code>LLVMBool LLVMIsInBounds(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsInBounds(LLVMLibrary.LLVMValueRef GEP);
  /**
   * Set the given GEP instruction to be inbounds or not.<br>
   * Original signature : <code>void LLVMSetIsInBounds(LLVMValueRef, LLVMBool)</code>
   */
  public static native void LLVMSetIsInBounds(
      LLVMLibrary.LLVMValueRef GEP, LLVMLibrary.LLVMBool InBounds);
  /**
   * Add an incoming value to the end of a PHI list.<br>
   * Original signature : <code>
   * void LLVMAddIncoming(LLVMValueRef, LLVMValueRef*, LLVMBasicBlockRef*, unsigned)</code>
   */
  public static native void LLVMAddIncoming(
      LLVMLibrary.LLVMValueRef PhiNode,
      LLVMLibrary.LLVMValueRef IncomingValues,
      LLVMLibrary.LLVMBasicBlockRef IncomingBlocks,
      int Count);
  /**
   * Obtain the number of incoming basic blocks to a PHI node.<br>
   * Original signature : <code>int LLVMCountIncoming(LLVMValueRef)</code>
   */
  public static native int LLVMCountIncoming(LLVMLibrary.LLVMValueRef PhiNode);
  /**
   * Obtain an incoming value to a PHI node as an LLVMValueRef.<br>
   * Original signature : <code>LLVMValueRef LLVMGetIncomingValue(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetIncomingValue(
      LLVMLibrary.LLVMValueRef PhiNode, int Index);
  /**
   * Obtain an incoming value to a PHI node as an LLVMBasicBlockRef.<br>
   * Original signature : <code>LLVMBasicBlockRef LLVMGetIncomingBlock(LLVMValueRef, unsigned)
   * </code>
   */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetIncomingBlock(
      LLVMLibrary.LLVMValueRef PhiNode, int Index);
  /**
   * Obtain the number of indices.<br>
   * NB: This also works on GEP.<br>
   * Original signature : <code>int LLVMGetNumIndices(LLVMValueRef)</code>
   */
  public static native int LLVMGetNumIndices(LLVMLibrary.LLVMValueRef Inst);
  /**
   * Obtain the indices as an array.<br>
   * Original signature : <code>* LLVMGetIndices(LLVMValueRef)</code>
   */
  public static native Pointer LLVMGetIndices(LLVMLibrary.LLVMValueRef Inst);
  /**
   * An instruction builder represents a point within a basic block and is<br>
   * the exclusive means of building instructions using the C interface.<br>
   * Original signature : <code>LLVMBuilderRef LLVMCreateBuilderInContext(LLVMContextRef)</code>
   */
  public static native LLVMLibrary.LLVMBuilderRef LLVMCreateBuilderInContext(
      LLVMLibrary.LLVMContextRef C);
  /** Original signature : <code>LLVMBuilderRef LLVMCreateBuilder()</code> */
  public static native LLVMLibrary.LLVMBuilderRef LLVMCreateBuilder();
  /**
   * Original signature : <code>
   * void LLVMPositionBuilder(LLVMBuilderRef, LLVMBasicBlockRef, LLVMValueRef)</code>
   */
  public static native void LLVMPositionBuilder(
      LLVMLibrary.LLVMBuilderRef Builder,
      LLVMLibrary.LLVMBasicBlockRef Block,
      LLVMLibrary.LLVMValueRef Instr);
  /**
   * Original signature : <code>void LLVMPositionBuilderBefore(LLVMBuilderRef, LLVMValueRef)</code>
   */
  public static native void LLVMPositionBuilderBefore(
      LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr);
  /**
   * Original signature : <code>void LLVMPositionBuilderAtEnd(LLVMBuilderRef, LLVMBasicBlockRef)
   * </code>
   */
  public static native void LLVMPositionBuilderAtEnd(
      LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMBasicBlockRef Block);
  /** Original signature : <code>LLVMBasicBlockRef LLVMGetInsertBlock(LLVMBuilderRef)</code> */
  public static native LLVMLibrary.LLVMBasicBlockRef LLVMGetInsertBlock(
      LLVMLibrary.LLVMBuilderRef Builder);
  /** Original signature : <code>void LLVMClearInsertionPosition(LLVMBuilderRef)</code> */
  public static native void LLVMClearInsertionPosition(LLVMLibrary.LLVMBuilderRef Builder);
  /** Original signature : <code>void LLVMInsertIntoBuilder(LLVMBuilderRef, LLVMValueRef)</code> */
  public static native void LLVMInsertIntoBuilder(
      LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr);
  /**
   * Original signature : <code>
   * void LLVMInsertIntoBuilderWithName(LLVMBuilderRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMInsertIntoBuilderWithName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMInsertIntoBuilderWithName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMInsertIntoBuilderWithName(
      LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr, Pointer Name);
  /**
   * Original signature : <code>
   * void LLVMInsertIntoBuilderWithName(LLVMBuilderRef, LLVMValueRef, const char*)</code>
   */
  public static native void LLVMInsertIntoBuilderWithName(
      LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Instr, String Name);
  /** Original signature : <code>void LLVMDisposeBuilder(LLVMBuilderRef)</code> */
  public static native void LLVMDisposeBuilder(LLVMLibrary.LLVMBuilderRef Builder);
  /**
   * Metadata<br>
   * Original signature : <code>void LLVMSetCurrentDebugLocation(LLVMBuilderRef, LLVMValueRef)
   * </code>
   */
  public static native void LLVMSetCurrentDebugLocation(
      LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef L);
  /** Original signature : <code>LLVMValueRef LLVMGetCurrentDebugLocation(LLVMBuilderRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMGetCurrentDebugLocation(
      LLVMLibrary.LLVMBuilderRef Builder);
  /**
   * Original signature : <code>void LLVMSetInstDebugLocation(LLVMBuilderRef, LLVMValueRef)</code>
   */
  public static native void LLVMSetInstDebugLocation(
      LLVMLibrary.LLVMBuilderRef Builder, LLVMLibrary.LLVMValueRef Inst);
  /**
   * Terminators<br>
   * Original signature : <code>LLVMValueRef LLVMBuildRetVoid()</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildRetVoid();
  /** Original signature : <code>LLVMValueRef LLVMBuildRet(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildRet(LLVMLibrary.LLVMValueRef V);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildAggregateRet(LLVMValueRef*, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAggregateRet(
      LLVMLibrary.LLVMValueRef RetVals, int N);
  /** Original signature : <code>LLVMValueRef LLVMBuildBr(LLVMBasicBlockRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildBr(LLVMLibrary.LLVMBasicBlockRef Dest);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildCondBr(LLVMValueRef, LLVMBasicBlockRef, LLVMBasicBlockRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildCondBr(
      LLVMLibrary.LLVMValueRef If,
      LLVMLibrary.LLVMBasicBlockRef Then,
      LLVMLibrary.LLVMBasicBlockRef Else);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildSwitch(LLVMValueRef, LLVMBasicBlockRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSwitch(
      LLVMLibrary.LLVMValueRef V, LLVMLibrary.LLVMBasicBlockRef Else, int NumCases);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildIndirectBr(LLVMBuilderRef, LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIndirectBr(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Addr, int NumDests);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInvoke(LLVMValueRef, LLVMValueRef*, unsigned, LLVMBasicBlockRef, LLVMBasicBlockRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildInvoke(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef, java.lang.String)} and {@link
   *     #LLVMBuildInvoke(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBasicBlockRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInvoke(
      LLVMLibrary.LLVMValueRef Fn,
      LLVMLibrary.LLVMValueRef Args,
      int NumArgs,
      LLVMLibrary.LLVMBasicBlockRef Then,
      LLVMLibrary.LLVMBasicBlockRef Catch,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInvoke(LLVMValueRef, LLVMValueRef*, unsigned, LLVMBasicBlockRef, LLVMBasicBlockRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInvoke(
      LLVMLibrary.LLVMValueRef Fn,
      LLVMLibrary.LLVMValueRef Args,
      int NumArgs,
      LLVMLibrary.LLVMBasicBlockRef Then,
      LLVMLibrary.LLVMBasicBlockRef Catch,
      String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildLandingPad(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, unsigned, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildLandingPad(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, java.lang.String)} and {@link
   *     #LLVMBuildLandingPad(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildLandingPad(
      LLVMLibrary.LLVMBuilderRef B,
      LLVMLibrary.LLVMTypeRef Ty,
      LLVMLibrary.LLVMValueRef PersFn,
      int NumClauses,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildLandingPad(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, unsigned, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildLandingPad(
      LLVMLibrary.LLVMBuilderRef B,
      LLVMLibrary.LLVMTypeRef Ty,
      LLVMLibrary.LLVMValueRef PersFn,
      int NumClauses,
      String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildResume(LLVMBuilderRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildResume(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Exn);
  /** Original signature : <code>LLVMValueRef LLVMBuildUnreachable()</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildUnreachable();
  /**
   * Add a case to the switch instruction<br>
   * Original signature : <code>void LLVMAddCase(LLVMValueRef, LLVMValueRef, LLVMBasicBlockRef)
   * </code>
   */
  public static native void LLVMAddCase(
      LLVMLibrary.LLVMValueRef Switch,
      LLVMLibrary.LLVMValueRef OnVal,
      LLVMLibrary.LLVMBasicBlockRef Dest);
  /**
   * Add a destination to the indirectbr instruction<br>
   * Original signature : <code>void LLVMAddDestination(LLVMValueRef, LLVMBasicBlockRef)</code>
   */
  public static native void LLVMAddDestination(
      LLVMLibrary.LLVMValueRef IndirectBr, LLVMLibrary.LLVMBasicBlockRef Dest);
  /**
   * Get the number of clauses on the landingpad instruction<br>
   * Original signature : <code>int LLVMGetNumClauses(LLVMValueRef)</code>
   */
  public static native int LLVMGetNumClauses(LLVMLibrary.LLVMValueRef LandingPad);
  /**
   * Get the value of the clause at idnex Idx on the landingpad instruction<br>
   * Original signature : <code>LLVMValueRef LLVMGetClause(LLVMValueRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMGetClause(
      LLVMLibrary.LLVMValueRef LandingPad, int Idx);
  /**
   * Add a catch or filter clause to the landingpad instruction<br>
   * Original signature : <code>void LLVMAddClause(LLVMValueRef, LLVMValueRef)</code>
   */
  public static native void LLVMAddClause(
      LLVMLibrary.LLVMValueRef LandingPad, LLVMLibrary.LLVMValueRef ClauseVal);
  /**
   * Get the 'cleanup' flag in the landingpad instruction<br>
   * Original signature : <code>LLVMBool LLVMIsCleanup(LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsCleanup(LLVMLibrary.LLVMValueRef LandingPad);
  /**
   * Set the 'cleanup' flag in the landingpad instruction<br>
   * Original signature : <code>void LLVMSetCleanup(LLVMValueRef, LLVMBool)</code>
   */
  public static native void LLVMSetCleanup(
      LLVMLibrary.LLVMValueRef LandingPad, LLVMLibrary.LLVMBool Val);
  /**
   * Arithmetic<br>
   * Original signature : <code>LLVMValueRef LLVMBuildAdd(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Arithmetic<br>
   * Original signature : <code>LLVMValueRef LLVMBuildAdd(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWAdd(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNSWAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNSWAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWAdd(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWAdd(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNUWAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNUWAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWAdd(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFAdd(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildFAdd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFAdd(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFAdd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSub(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSub(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWSub(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNSWSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNSWSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWSub(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWSub(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNUWSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNUWSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWSub(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFSub(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildFSub(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFSub(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFSub(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildMul(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildMul(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWMul(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNSWMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNSWMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWMul(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWMul(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNUWMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNUWMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWMul(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFMul(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildFMul(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFMul(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFMul(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildUDiv(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildUDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildUDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildUDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildUDiv(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildUDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSDiv(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildSDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildSDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSDiv(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildExactSDiv(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildExactSDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildExactSDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildExactSDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildExactSDiv(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildExactSDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFDiv(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildFDiv(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFDiv(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFDiv(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildURem(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildURem(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildURem(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildURem(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildURem(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildURem(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSRem(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildSRem(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildSRem(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSRem(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSRem(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSRem(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFRem(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFRem(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildFRem(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFRem(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFRem(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFRem(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildShl(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildShl(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildShl(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildShl(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildShl(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildShl(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildLShr(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildLShr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildLShr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildLShr(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildLShr(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildLShr(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildAShr(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildAShr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildAShr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAShr(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildAShr(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAShr(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildAnd(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildAnd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildAnd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAnd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildAnd(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAnd(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildOr(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildOr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildOr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildOr(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildOr(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildOr(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildXor(LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildXor(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildXor(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildXor(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildXor(LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildXor(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildBinOp(LLVMBuilderRef, LLVMOpcode, LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildBinOp(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildBinOp(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildBinOp(
      LLVMLibrary.LLVMBuilderRef B,
      int Op,
      LLVMLibrary.LLVMValueRef LHS,
      LLVMLibrary.LLVMValueRef RHS,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildBinOp(LLVMBuilderRef, LLVMOpcode, LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildBinOp(
      LLVMLibrary.LLVMBuilderRef B,
      int Op,
      LLVMLibrary.LLVMValueRef LHS,
      LLVMLibrary.LLVMValueRef RHS,
      String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildNeg(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and
   *     {@link #LLVMBuildNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNeg(
      LLVMLibrary.LLVMValueRef V, Pointer Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildNeg(LLVMValueRef, const char*)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNeg(
      LLVMLibrary.LLVMValueRef V, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWNeg(LLVMBuilderRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNSWNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNSWNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWNeg(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNSWNeg(LLVMBuilderRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNSWNeg(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWNeg(LLVMBuilderRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNUWNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildNUWNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWNeg(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildNUWNeg(LLVMBuilderRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNUWNeg(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef V, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFNeg(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and
   *     {@link #LLVMBuildFNeg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFNeg(
      LLVMLibrary.LLVMValueRef V, Pointer Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildFNeg(LLVMValueRef, const char*)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFNeg(
      LLVMLibrary.LLVMValueRef V, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildNot(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildNot(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and
   *     {@link #LLVMBuildNot(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNot(
      LLVMLibrary.LLVMValueRef V, Pointer Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildNot(LLVMValueRef, const char*)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildNot(
      LLVMLibrary.LLVMValueRef V, String Name);
  /**
   * Memory<br>
   * Original signature : <code>LLVMValueRef LLVMBuildMalloc(LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildMalloc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)}
   *     and {@link #LLVMBuildMalloc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildMalloc(
      LLVMLibrary.LLVMTypeRef Ty, Pointer Name);
  /**
   * Memory<br>
   * Original signature : <code>LLVMValueRef LLVMBuildMalloc(LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildMalloc(
      LLVMLibrary.LLVMTypeRef Ty, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildArrayMalloc(LLVMTypeRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildArrayMalloc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildArrayMalloc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildArrayMalloc(
      LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildArrayMalloc(LLVMTypeRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildArrayMalloc(
      LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildAlloca(LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildAlloca(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)}
   *     and {@link #LLVMBuildAlloca(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAlloca(
      LLVMLibrary.LLVMTypeRef Ty, Pointer Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildAlloca(LLVMTypeRef, const char*)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAlloca(
      LLVMLibrary.LLVMTypeRef Ty, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildArrayAlloca(LLVMTypeRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildArrayAlloca(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildArrayAlloca(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildArrayAlloca(
      LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildArrayAlloca(LLVMTypeRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildArrayAlloca(
      LLVMLibrary.LLVMTypeRef Ty, LLVMLibrary.LLVMValueRef Val, String Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildFree(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFree(LLVMLibrary.LLVMValueRef PointerVal);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildLoad(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildLoad(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and
   *     {@link #LLVMBuildLoad(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildLoad(
      LLVMLibrary.LLVMValueRef PointerVal, Pointer Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildLoad(LLVMValueRef, const char*)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildLoad(
      LLVMLibrary.LLVMValueRef PointerVal, String Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildStore(LLVMValueRef, LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildStore(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMValueRef Ptr);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildGEP(LLVMBuilderRef, LLVMValueRef, LLVMValueRef*, unsigned, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildGEP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, java.lang.String)} and {@link
   *     #LLVMBuildGEP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildGEP(
      LLVMLibrary.LLVMBuilderRef B,
      LLVMLibrary.LLVMValueRef Pointer,
      LLVMLibrary.LLVMValueRef Indices,
      int NumIndices,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildGEP(LLVMBuilderRef, LLVMValueRef, LLVMValueRef*, unsigned, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildGEP(
      LLVMLibrary.LLVMBuilderRef B,
      LLVMLibrary.LLVMValueRef Pointer,
      LLVMLibrary.LLVMValueRef Indices,
      int NumIndices,
      String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInBoundsGEP(LLVMBuilderRef, LLVMValueRef, LLVMValueRef*, unsigned, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildInBoundsGEP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, java.lang.String)} and {@link
   *     #LLVMBuildInBoundsGEP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInBoundsGEP(
      LLVMLibrary.LLVMBuilderRef B,
      LLVMLibrary.LLVMValueRef Pointer,
      LLVMLibrary.LLVMValueRef Indices,
      int NumIndices,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInBoundsGEP(LLVMBuilderRef, LLVMValueRef, LLVMValueRef*, unsigned, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInBoundsGEP(
      LLVMLibrary.LLVMBuilderRef B,
      LLVMLibrary.LLVMValueRef Pointer,
      LLVMLibrary.LLVMValueRef Indices,
      int NumIndices,
      String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildStructGEP(LLVMBuilderRef, LLVMValueRef, unsigned, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildStructGEP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, java.lang.String)} and {@link
   *     #LLVMBuildStructGEP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildStructGEP(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, int Idx, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildStructGEP(LLVMBuilderRef, LLVMValueRef, unsigned, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildStructGEP(
      LLVMLibrary.LLVMBuilderRef B, LLVMLibrary.LLVMValueRef Pointer, int Idx, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildGlobalString(LLVMBuilderRef, const char*, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildGlobalString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     java.lang.String, java.lang.String)} and {@link
   *     #LLVMBuildGlobalString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildGlobalString(
      LLVMLibrary.LLVMBuilderRef B, Pointer Str, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildGlobalString(LLVMBuilderRef, const char*, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildGlobalString(
      LLVMLibrary.LLVMBuilderRef B, String Str, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildGlobalStringPtr(LLVMBuilderRef, const char*, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildGlobalStringPtr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     java.lang.String, java.lang.String)} and {@link
   *     #LLVMBuildGlobalStringPtr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef,
   *     com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildGlobalStringPtr(
      LLVMLibrary.LLVMBuilderRef B, Pointer Str, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildGlobalStringPtr(LLVMBuilderRef, const char*, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildGlobalStringPtr(
      LLVMLibrary.LLVMBuilderRef B, String Str, String Name);
  /** Original signature : <code>LLVMBool LLVMGetVolatile(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMGetVolatile(
      LLVMLibrary.LLVMValueRef MemoryAccessInst);
  /** Original signature : <code>void LLVMSetVolatile(LLVMValueRef, LLVMBool)</code> */
  public static native void LLVMSetVolatile(
      LLVMLibrary.LLVMValueRef MemoryAccessInst, LLVMLibrary.LLVMBool IsVolatile);
  /** Original signature : <code>LLVMAtomicOrdering LLVMGetOrdering(LLVMValueRef)</code> */
  public static native int LLVMGetOrdering(LLVMLibrary.LLVMValueRef MemoryAccessInst);
  /** Original signature : <code>void LLVMSetOrdering(LLVMValueRef, LLVMAtomicOrdering)</code> */
  public static native void LLVMSetOrdering(
      LLVMLibrary.LLVMValueRef MemoryAccessInst, int Ordering);
  /**
   * Casts<br>
   * Original signature : <code>LLVMValueRef LLVMBuildTrunc(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildTrunc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildTrunc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildTrunc(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Casts<br>
   * Original signature : <code>LLVMValueRef LLVMBuildTrunc(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildTrunc(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildZExt(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildZExt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildZExt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildZExt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildZExt(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildZExt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSExt(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildSExt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildSExt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSExt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSExt(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSExt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPToUI(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFPToUI(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildFPToUI(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPToUI(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPToUI(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPToUI(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPToSI(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFPToSI(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildFPToSI(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPToSI(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPToSI(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPToSI(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildUIToFP(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildUIToFP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildUIToFP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildUIToFP(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildUIToFP(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildUIToFP(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSIToFP(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildSIToFP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildSIToFP(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSIToFP(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildSIToFP(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSIToFP(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildFPTrunc(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFPTrunc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildFPTrunc(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPTrunc(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildFPTrunc(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPTrunc(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPExt(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFPExt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildFPExt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPExt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPExt(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPExt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildPtrToInt(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildPtrToInt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildPtrToInt(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPtrToInt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildPtrToInt(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPtrToInt(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildIntToPtr(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildIntToPtr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildIntToPtr(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIntToPtr(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildIntToPtr(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIntToPtr(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildAddrSpaceCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildAddrSpaceCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildAddrSpaceCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAddrSpaceCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildAddrSpaceCast(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAddrSpaceCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildZExtOrBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildZExtOrBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildZExtOrBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildZExtOrBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildZExtOrBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildZExtOrBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildSExtOrBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildSExtOrBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildSExtOrBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSExtOrBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildSExtOrBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSExtOrBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildTruncOrBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildTruncOrBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildTruncOrBitCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildTruncOrBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildTruncOrBitCast(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildTruncOrBitCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildCast(LLVMBuilderRef, LLVMOpcode, LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildCast(
      LLVMLibrary.LLVMBuilderRef B,
      int Op,
      LLVMLibrary.LLVMValueRef Val,
      LLVMLibrary.LLVMTypeRef DestTy,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildCast(LLVMBuilderRef, LLVMOpcode, LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildCast(
      LLVMLibrary.LLVMBuilderRef B,
      int Op,
      LLVMLibrary.LLVMValueRef Val,
      LLVMLibrary.LLVMTypeRef DestTy,
      String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildPointerCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildPointerCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildPointerCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPointerCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildPointerCast(LLVMValueRef, LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPointerCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Signed cast!<br>
   * Original signature : <code>
   * LLVMValueRef LLVMBuildIntCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @param Val Signed cast!<br>
   * @deprecated use the safer methods {@link
   *     #LLVMBuildIntCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildIntCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIntCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Signed cast!<br>
   * Original signature : <code>
   * LLVMValueRef LLVMBuildIntCast(LLVMValueRef, LLVMTypeRef, const char*)</code><br>
   *
   * @param Val Signed cast!
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIntCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPCast(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFPCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildFPCast(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildFPCast(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFPCast(
      LLVMLibrary.LLVMValueRef Val, LLVMLibrary.LLVMTypeRef DestTy, String Name);
  /**
   * Comparisons<br>
   * Original signature : <code>
   * LLVMValueRef LLVMBuildICmp(LLVMIntPredicate, LLVMValueRef, LLVMValueRef, const char*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link #LLVMBuildICmp(int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildICmp(int, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildICmp(
      int Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Comparisons<br>
   * Original signature : <code>
   * LLVMValueRef LLVMBuildICmp(LLVMIntPredicate, LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildICmp(
      int Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildFCmp(LLVMRealPredicate, LLVMValueRef, LLVMValueRef, const char*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link #LLVMBuildFCmp(int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildFCmp(int, org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFCmp(
      int Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildFCmp(LLVMRealPredicate, LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFCmp(
      int Op, LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Miscellaneous instructions<br>
   * Original signature : <code>LLVMValueRef LLVMBuildPhi(LLVMTypeRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildPhi(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and
   *     {@link #LLVMBuildPhi(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPhi(
      LLVMLibrary.LLVMTypeRef Ty, Pointer Name);
  /**
   * Miscellaneous instructions<br>
   * Original signature : <code>LLVMValueRef LLVMBuildPhi(LLVMTypeRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPhi(
      LLVMLibrary.LLVMTypeRef Ty, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildCall(LLVMValueRef, LLVMValueRef*, unsigned, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildCall(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, java.lang.String)} and {@link
   *     #LLVMBuildCall(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildCall(
      LLVMLibrary.LLVMValueRef Fn, LLVMLibrary.LLVMValueRef Args, int NumArgs, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildCall(LLVMValueRef, LLVMValueRef*, unsigned, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildCall(
      LLVMLibrary.LLVMValueRef Fn, LLVMLibrary.LLVMValueRef Args, int NumArgs, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildSelect(LLVMValueRef, LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildSelect(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildSelect(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSelect(
      LLVMLibrary.LLVMValueRef If,
      LLVMLibrary.LLVMValueRef Then,
      LLVMLibrary.LLVMValueRef Else,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildSelect(LLVMValueRef, LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildSelect(
      LLVMLibrary.LLVMValueRef If,
      LLVMLibrary.LLVMValueRef Then,
      LLVMLibrary.LLVMValueRef Else,
      String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildVAArg(LLVMValueRef, LLVMTypeRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildVAArg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, java.lang.String)} and {@link
   *     #LLVMBuildVAArg(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildVAArg(
      LLVMLibrary.LLVMValueRef List, LLVMLibrary.LLVMTypeRef Ty, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildVAArg(LLVMValueRef, LLVMTypeRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildVAArg(
      LLVMLibrary.LLVMValueRef List, LLVMLibrary.LLVMTypeRef Ty, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildExtractElement(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildExtractElement(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildExtractElement(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildExtractElement(
      LLVMLibrary.LLVMValueRef VecVal, LLVMLibrary.LLVMValueRef Index, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildExtractElement(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildExtractElement(
      LLVMLibrary.LLVMValueRef VecVal, LLVMLibrary.LLVMValueRef Index, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInsertElement(LLVMValueRef, LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildInsertElement(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildInsertElement(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInsertElement(
      LLVMLibrary.LLVMValueRef VecVal,
      LLVMLibrary.LLVMValueRef EltVal,
      LLVMLibrary.LLVMValueRef Index,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInsertElement(LLVMValueRef, LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInsertElement(
      LLVMLibrary.LLVMValueRef VecVal,
      LLVMLibrary.LLVMValueRef EltVal,
      LLVMLibrary.LLVMValueRef Index,
      String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildShuffleVector(LLVMValueRef, LLVMValueRef, LLVMValueRef, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildShuffleVector(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildShuffleVector(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildShuffleVector(
      LLVMLibrary.LLVMValueRef V1,
      LLVMLibrary.LLVMValueRef V2,
      LLVMLibrary.LLVMValueRef Mask,
      Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildShuffleVector(LLVMValueRef, LLVMValueRef, LLVMValueRef, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildShuffleVector(
      LLVMLibrary.LLVMValueRef V1,
      LLVMLibrary.LLVMValueRef V2,
      LLVMLibrary.LLVMValueRef Mask,
      String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildExtractValue(LLVMValueRef, unsigned, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildExtractValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     java.lang.String)} and {@link
   *     #LLVMBuildExtractValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildExtractValue(
      LLVMLibrary.LLVMValueRef AggVal, int Index, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildExtractValue(LLVMValueRef, unsigned, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildExtractValue(
      LLVMLibrary.LLVMValueRef AggVal, int Index, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInsertValue(LLVMValueRef, LLVMValueRef, unsigned, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildInsertValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, java.lang.String)} and {@link
   *     #LLVMBuildInsertValue(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInsertValue(
      LLVMLibrary.LLVMValueRef AggVal, LLVMLibrary.LLVMValueRef EltVal, int Index, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildInsertValue(LLVMValueRef, LLVMValueRef, unsigned, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildInsertValue(
      LLVMLibrary.LLVMValueRef AggVal, LLVMLibrary.LLVMValueRef EltVal, int Index, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildIsNull(LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildIsNull(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)}
   *     and {@link #LLVMBuildIsNull(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIsNull(
      LLVMLibrary.LLVMValueRef Val, Pointer Name);
  /** Original signature : <code>LLVMValueRef LLVMBuildIsNull(LLVMValueRef, const char*)</code> */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIsNull(
      LLVMLibrary.LLVMValueRef Val, String Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildIsNotNull(LLVMValueRef, const char*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildIsNotNull(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     java.lang.String)} and {@link
   *     #LLVMBuildIsNotNull(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIsNotNull(
      LLVMLibrary.LLVMValueRef Val, Pointer Name);
  /**
   * Original signature : <code>LLVMValueRef LLVMBuildIsNotNull(LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildIsNotNull(
      LLVMLibrary.LLVMValueRef Val, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildPtrDiff(LLVMValueRef, LLVMValueRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildPtrDiff(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, java.lang.String)} and {@link
   *     #LLVMBuildPtrDiff(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPtrDiff(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildPtrDiff(LLVMValueRef, LLVMValueRef, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildPtrDiff(
      LLVMLibrary.LLVMValueRef LHS, LLVMLibrary.LLVMValueRef RHS, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildFence(LLVMBuilderRef, LLVMAtomicOrdering, LLVMBool, const char*)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMBuildFence(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool, java.lang.String)} and {@link
   *     #LLVMBuildFence(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBuilderRef, int,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFence(
      LLVMLibrary.LLVMBuilderRef B, int ordering, LLVMLibrary.LLVMBool singleThread, Pointer Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildFence(LLVMBuilderRef, LLVMAtomicOrdering, LLVMBool, const char*)</code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildFence(
      LLVMLibrary.LLVMBuilderRef B, int ordering, LLVMLibrary.LLVMBool singleThread, String Name);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildAtomicRMW(LLVMBuilderRef, LLVMAtomicRMWBinOp, LLVMValueRef, LLVMValueRef, LLVMAtomicOrdering, LLVMBool)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAtomicRMW(
      LLVMLibrary.LLVMBuilderRef B,
      int op,
      LLVMLibrary.LLVMValueRef PTR,
      LLVMLibrary.LLVMValueRef Val,
      int ordering,
      LLVMLibrary.LLVMBool singleThread);
  /**
   * Original signature : <code>
   * LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef, LLVMValueRef, LLVMValueRef, LLVMValueRef, LLVMAtomicOrdering, LLVMAtomicOrdering, LLVMBool)
   * </code>
   */
  public static native LLVMLibrary.LLVMValueRef LLVMBuildAtomicCmpXchg(
      LLVMLibrary.LLVMBuilderRef B,
      LLVMLibrary.LLVMValueRef Ptr,
      LLVMLibrary.LLVMValueRef Cmp,
      LLVMLibrary.LLVMValueRef New,
      int SuccessOrdering,
      int FailureOrdering,
      LLVMLibrary.LLVMBool SingleThread);
  /** Original signature : <code>LLVMBool LLVMIsAtomicSingleThread(LLVMValueRef)</code> */
  public static native LLVMLibrary.LLVMBool LLVMIsAtomicSingleThread(
      LLVMLibrary.LLVMValueRef AtomicInst);
  /** Original signature : <code>void LLVMSetAtomicSingleThread(LLVMValueRef, LLVMBool)</code> */
  public static native void LLVMSetAtomicSingleThread(
      LLVMLibrary.LLVMValueRef AtomicInst, LLVMLibrary.LLVMBool SingleThread);
  /**
   * Original signature : <code>LLVMAtomicOrdering LLVMGetCmpXchgSuccessOrdering(LLVMValueRef)
   * </code>
   */
  public static native int LLVMGetCmpXchgSuccessOrdering(LLVMLibrary.LLVMValueRef CmpXchgInst);
  /**
   * Original signature : <code>void LLVMSetCmpXchgSuccessOrdering(LLVMValueRef, LLVMAtomicOrdering)
   * </code>
   */
  public static native void LLVMSetCmpXchgSuccessOrdering(
      LLVMLibrary.LLVMValueRef CmpXchgInst, int Ordering);
  /**
   * Original signature : <code>LLVMAtomicOrdering LLVMGetCmpXchgFailureOrdering(LLVMValueRef)
   * </code>
   */
  public static native int LLVMGetCmpXchgFailureOrdering(LLVMLibrary.LLVMValueRef CmpXchgInst);
  /**
   * Original signature : <code>void LLVMSetCmpXchgFailureOrdering(LLVMValueRef, LLVMAtomicOrdering)
   * </code>
   */
  public static native void LLVMSetCmpXchgFailureOrdering(
      LLVMLibrary.LLVMValueRef CmpXchgInst, int Ordering);
  /**
   * Changes the type of M so it can be passed to FunctionPassManagers and the<br>
   * JIT. They take ModuleProviders for historical reasons.<br>
   * Original signature : <code>
   * LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(LLVMModuleRef)</code>
   */
  public static native LLVMLibrary.LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(
      LLVMLibrary.LLVMModuleRef M);
  /**
   * Destroys the module M.<br>
   * Original signature : <code>void LLVMDisposeModuleProvider(LLVMModuleProviderRef)</code>
   */
  public static native void LLVMDisposeModuleProvider(LLVMLibrary.LLVMModuleProviderRef M);
  /**
   * Original signature : <code>
   * LLVMBool LLVMCreateMemoryBufferWithContentsOfFile(const char*, LLVMMemoryBufferRef*, char**)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMCreateMemoryBufferWithContentsOfFile(java.lang.String,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMMemoryBufferRef,
   *     com.sun.jna.ptr.PointerByReference)} and {@link
   *     #LLVMCreateMemoryBufferWithContentsOfFile(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMMemoryBufferRef,
   *     com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBool LLVMCreateMemoryBufferWithContentsOfFile(
      Pointer Path, LLVMLibrary.LLVMMemoryBufferRef OutMemBuf, PointerByReference OutMessage);
  /**
   * Original signature : <code>
   * LLVMBool LLVMCreateMemoryBufferWithContentsOfFile(const char*, LLVMMemoryBufferRef*, char**)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMCreateMemoryBufferWithContentsOfFile(
      String Path, LLVMLibrary.LLVMMemoryBufferRef OutMemBuf, PointerByReference OutMessage);
  /**
   * Original signature : <code>
   * LLVMBool LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef*, char**)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMCreateMemoryBufferWithSTDIN(
      LLVMLibrary.LLVMMemoryBufferRef OutMemBuf, PointerByReference OutMessage);
  /**
   * Original signature : <code>
   * LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(const char*, size_t, const char*, LLVMBool)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMCreateMemoryBufferWithMemoryRange(java.lang.String,
   *     org.sosy_lab.llvm_j.binding.ext.NativeSize, java.lang.String,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} and {@link
   *     #LLVMCreateMemoryBufferWithMemoryRange(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.ext.NativeSize, com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMBool)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(
      Pointer InputData,
      NativeSize InputDataLength,
      Pointer BufferName,
      LLVMLibrary.LLVMBool RequiresNullTerminator);
  /**
   * Original signature : <code>
   * LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(const char*, size_t, const char*, LLVMBool)
   * </code>
   */
  public static native LLVMLibrary.LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(
      String InputData,
      NativeSize InputDataLength,
      String BufferName,
      LLVMLibrary.LLVMBool RequiresNullTerminator);
  /**
   * Original signature : <code>
   * LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(const char*, size_t, const char*)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMCreateMemoryBufferWithMemoryRangeCopy(java.lang.String,
   *     org.sosy_lab.llvm_j.binding.ext.NativeSize, java.lang.String)} and {@link
   *     #LLVMCreateMemoryBufferWithMemoryRangeCopy(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.ext.NativeSize, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(
      Pointer InputData, NativeSize InputDataLength, Pointer BufferName);
  /**
   * Original signature : <code>
   * LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(const char*, size_t, const char*)
   * </code>
   */
  public static native LLVMLibrary.LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(
      String InputData, NativeSize InputDataLength, String BufferName);
  /** Original signature : <code>char* LLVMGetBufferStart(LLVMMemoryBufferRef)</code> */
  public static native String LLVMGetBufferStart(LLVMLibrary.LLVMMemoryBufferRef MemBuf);
  /** Original signature : <code>size_t LLVMGetBufferSize(LLVMMemoryBufferRef)</code> */
  public static native NativeSize LLVMGetBufferSize(LLVMLibrary.LLVMMemoryBufferRef MemBuf);
  /** Original signature : <code>void LLVMDisposeMemoryBuffer(LLVMMemoryBufferRef)</code> */
  public static native void LLVMDisposeMemoryBuffer(LLVMLibrary.LLVMMemoryBufferRef MemBuf);
  /**
   * Return the global pass registry, for use with initialization functions.<br>
   * See llvm::PassRegistry::getPassRegistry<br>
   * Original signature : <code>LLVMPassRegistryRef LLVMGetGlobalPassRegistry()</code>
   */
  public static native LLVMLibrary.LLVMPassRegistryRef LLVMGetGlobalPassRegistry();
  /**
   * Constructs a new whole-module pass pipeline. This type of pipeline is<br>
   * suitable for link-time optimization and whole-module transformations.<br>
   * See llvm::PassManager::PassManager<br>
   * Original signature : <code>LLVMPassManagerRef LLVMCreatePassManager()</code>
   */
  public static native LLVMLibrary.LLVMPassManagerRef LLVMCreatePassManager();
  /**
   * Constructs a new function-by-function pass pipeline over the module<br>
   * provider. It does not take ownership of the module provider. This type of<br>
   * pipeline is suitable for code generation and JIT compilation tasks.<br>
   * See llvm::FunctionPassManager::FunctionPassManager<br>
   * Original signature : <code>
   * LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(LLVMModuleRef)</code>
   */
  public static native LLVMLibrary.LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(
      LLVMLibrary.LLVMModuleRef M);
  /**
   * Deprecated: Use LLVMCreateFunctionPassManagerForModule instead.<br>
   * Original signature : <code>
   * LLVMPassManagerRef LLVMCreateFunctionPassManager(LLVMModuleProviderRef)</code>
   */
  public static native LLVMLibrary.LLVMPassManagerRef LLVMCreateFunctionPassManager(
      LLVMLibrary.LLVMModuleProviderRef MP);
  /**
   * Initializes, executes on the provided module, and finalizes all of the<br>
   * passes scheduled in the pass manager. Returns 1 if any of the passes<br>
   * modified the module, 0 otherwise.<br>
   * See llvm::PassManager::run(Module&amp;)<br>
   * Original signature : <code>LLVMBool LLVMRunPassManager(LLVMPassManagerRef, LLVMModuleRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMRunPassManager(
      LLVMLibrary.LLVMPassManagerRef PM, LLVMLibrary.LLVMModuleRef M);
  /**
   * Initializes all of the function passes scheduled in the function pass<br>
   * manager. Returns 1 if any of the passes modified the module, 0 otherwise.<br>
   * See llvm::FunctionPassManager::doInitialization<br>
   * Original signature : <code>LLVMBool LLVMInitializeFunctionPassManager(LLVMPassManagerRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMInitializeFunctionPassManager(
      LLVMLibrary.LLVMPassManagerRef FPM);
  /**
   * Executes all of the function passes scheduled in the function pass manager<br>
   * on the provided function. Returns 1 if any of the passes modified the<br>
   * function, false otherwise.<br>
   * See llvm::FunctionPassManager::run(Function&amp;)<br>
   * Original signature : <code>
   * LLVMBool LLVMRunFunctionPassManager(LLVMPassManagerRef, LLVMValueRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMRunFunctionPassManager(
      LLVMLibrary.LLVMPassManagerRef FPM, LLVMLibrary.LLVMValueRef F);
  /**
   * Finalizes all of the function passes scheduled in in the function pass<br>
   * manager. Returns 1 if any of the passes modified the module, 0 otherwise.<br>
   * See llvm::FunctionPassManager::doFinalization<br>
   * Original signature : <code>LLVMBool LLVMFinalizeFunctionPassManager(LLVMPassManagerRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMFinalizeFunctionPassManager(
      LLVMLibrary.LLVMPassManagerRef FPM);
  /**
   * Frees the memory of a pass pipeline. For function pipelines, does not free<br>
   * the module provider.<br>
   * See llvm::PassManagerBase::~PassManagerBase.<br>
   * Original signature : <code>void LLVMDisposePassManager(LLVMPassManagerRef)</code>
   */
  public static native void LLVMDisposePassManager(LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * Deprecated: Multi-threading can only be enabled/disabled with the compile<br>
   * time define LLVM_ENABLE_THREADS. This function always returns<br>
   * LLVMIsMultithreaded().<br>
   * Original signature : <code>LLVMBool LLVMStartMultithreaded()</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMStartMultithreaded();
  /**
   * Deprecated: Multi-threading can only be enabled/disabled with the compile<br>
   * time define LLVM_ENABLE_THREADS.<br>
   * Original signature : <code>void LLVMStopMultithreaded()</code>
   */
  public static native void LLVMStopMultithreaded();
  /**
   * Check whether LLVM is executing in thread-safe mode or not.<br>
   * See llvm::llvm_is_multithreaded<br>
   * Original signature : <code>LLVMBool LLVMIsMultithreaded()</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsMultithreaded();
  /**
   * Verifies that a module is valid, taking the specified action if not.<br>
   * Optionally returns a human-readable description of any invalid constructs.<br>
   * OutMessage must be disposed with LLVMDisposeMessage.<br>
   * Original signature : <code>
   * LLVMBool LLVMVerifyModule(LLVMModuleRef, LLVMVerifierFailureAction, char**)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMVerifyModule(
      LLVMLibrary.LLVMModuleRef M, int Action, PointerByReference OutMessage);
  /**
   * Verifies that a single function is valid, taking the specified action. Useful<br>
   * for debugging.<br>
   * Original signature : <code>LLVMBool LLVMVerifyFunction(LLVMValueRef, LLVMVerifierFailureAction)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMVerifyFunction(
      LLVMLibrary.LLVMValueRef Fn, int Action);
  /**
   * Open up a ghostview window that displays the CFG of the current function.<br>
   * Useful for debugging.<br>
   * Original signature : <code>void LLVMViewFunctionCFG(LLVMValueRef)</code>
   */
  public static native void LLVMViewFunctionCFG(LLVMLibrary.LLVMValueRef Fn);
  /** Original signature : <code>void LLVMViewFunctionCFGOnly(LLVMValueRef)</code> */
  public static native void LLVMViewFunctionCFGOnly(LLVMLibrary.LLVMValueRef Fn);
  /**
   * Writes a module to the specified path. Returns 0 on success.<br>
   * Original signature : <code>int LLVMWriteBitcodeToFile(LLVMModuleRef, const char*)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMWriteBitcodeToFile(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     java.lang.String)} and {@link
   *     #LLVMWriteBitcodeToFile(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native int LLVMWriteBitcodeToFile(LLVMLibrary.LLVMModuleRef M, Pointer Path);
  /**
   * Writes a module to the specified path. Returns 0 on success.<br>
   * Original signature : <code>int LLVMWriteBitcodeToFile(LLVMModuleRef, const char*)</code>
   */
  public static native int LLVMWriteBitcodeToFile(LLVMLibrary.LLVMModuleRef M, String Path);
  /**
   * Writes a module to an open file descriptor. Returns 0 on success.<br>
   * Original signature : <code>int LLVMWriteBitcodeToFD(LLVMModuleRef, int, int, int)</code>
   */
  public static native int LLVMWriteBitcodeToFD(
      LLVMLibrary.LLVMModuleRef M, int FD, int ShouldClose, int Unbuffered);
  /**
   * Deprecated for LLVMWriteBitcodeToFD. Writes a module to an open file<br>
   * descriptor. Returns 0 on success. Closes the Handle.<br>
   * Original signature : <code>int LLVMWriteBitcodeToFileHandle(LLVMModuleRef, int)</code>
   */
  public static native int LLVMWriteBitcodeToFileHandle(LLVMLibrary.LLVMModuleRef M, int Handle);
  /**
   * Writes a module to a new memory buffer and returns it.<br>
   * Original signature : <code>LLVMMemoryBufferRef LLVMWriteBitcodeToMemoryBuffer(LLVMModuleRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMMemoryBufferRef LLVMWriteBitcodeToMemoryBuffer(
      LLVMLibrary.LLVMModuleRef M);
  /**
   * Builds a module from the bitcode in the specified memory buffer, returning a<br>
   * reference to the module via the OutModule parameter. Returns 0 on success.<br>
   * Optionally returns a human-readable error message via OutMessage.<br>
   * This is deprecated. Use LLVMParseBitcode2.<br>
   * Original signature : <code>
   * LLVMBool LLVMParseBitcode(LLVMMemoryBufferRef, LLVMModuleRef*, char**)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMParseBitcode(
      LLVMLibrary.LLVMMemoryBufferRef MemBuf,
      LLVMLibrary.LLVMModuleRef OutModule,
      PointerByReference OutMessage);
  /**
   * Builds a module from the bitcode in the specified memory buffer, returning a<br>
   * reference to the module via the OutModule parameter. Returns 0 on success.<br>
   * Original signature : <code>LLVMBool LLVMParseBitcode2(LLVMMemoryBufferRef, LLVMModuleRef*)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMParseBitcode2(
      LLVMLibrary.LLVMMemoryBufferRef MemBuf, LLVMLibrary.LLVMModuleRef OutModule);
  /**
   * This is deprecated. Use LLVMParseBitcodeInContext2.<br>
   * Original signature : <code>
   * LLVMBool LLVMParseBitcodeInContext(LLVMContextRef, LLVMMemoryBufferRef, LLVMModuleRef*, char**)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMParseBitcodeInContext(
      LLVMLibrary.LLVMContextRef ContextRef,
      LLVMLibrary.LLVMMemoryBufferRef MemBuf,
      LLVMLibrary.LLVMModuleRef OutModule,
      PointerByReference OutMessage);
  /**
   * Original signature : <code>
   * LLVMBool LLVMParseBitcodeInContext2(LLVMContextRef, LLVMMemoryBufferRef, LLVMModuleRef*)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMParseBitcodeInContext2(
      LLVMLibrary.LLVMContextRef ContextRef,
      LLVMLibrary.LLVMMemoryBufferRef MemBuf,
      LLVMLibrary.LLVMModuleRef OutModule);
  /**
   * Reads a module from the specified path, returning via the OutMP parameter<br>
   * a module provider which performs lazy deserialization. Returns 0 on success.<br>
   * Optionally returns a human-readable error message via OutMessage.<br>
   * This is deprecated. Use LLVMGetBitcodeModuleInContext2.<br>
   * Original signature : <code>
   * LLVMBool LLVMGetBitcodeModuleInContext(LLVMContextRef, LLVMMemoryBufferRef, LLVMModuleRef*, char**)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMGetBitcodeModuleInContext(
      LLVMLibrary.LLVMContextRef ContextRef,
      LLVMLibrary.LLVMMemoryBufferRef MemBuf,
      LLVMLibrary.LLVMModuleRef OutM,
      PointerByReference OutMessage);
  /**
   * Reads a module from the specified path, returning via the OutMP parameter a<br>
   * module provider which performs lazy deserialization. Returns 0 on success.<br>
   * Original signature : <code>
   * LLVMBool LLVMGetBitcodeModuleInContext2(LLVMContextRef, LLVMMemoryBufferRef, LLVMModuleRef*)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMGetBitcodeModuleInContext2(
      LLVMLibrary.LLVMContextRef ContextRef,
      LLVMLibrary.LLVMMemoryBufferRef MemBuf,
      LLVMLibrary.LLVMModuleRef OutM);
  /**
   * This is deprecated. Use LLVMGetBitcodeModule2.<br>
   * Original signature : <code>
   * LLVMBool LLVMGetBitcodeModule(LLVMMemoryBufferRef, LLVMModuleRef*, char**)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMGetBitcodeModule(
      LLVMLibrary.LLVMMemoryBufferRef MemBuf,
      LLVMLibrary.LLVMModuleRef OutM,
      PointerByReference OutMessage);
  /**
   * Original signature : <code>LLVMBool LLVMGetBitcodeModule2(LLVMMemoryBufferRef, LLVMModuleRef*)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMGetBitcodeModule2(
      LLVMLibrary.LLVMMemoryBufferRef MemBuf, LLVMLibrary.LLVMModuleRef OutM);
  /**
   * Read LLVM IR from a memory buffer and convert it into an in-memory Module<br>
   * object. Returns 0 on success.<br>
   * Optionally returns a human-readable description of any errors that<br>
   * occurred during parsing IR. OutMessage must be disposed with<br>
   * LLVMDisposeMessage.<br>
   * See llvm::ParseIR()<br>
   * Original signature : <code>
   * LLVMBool LLVMParseIRInContext(LLVMContextRef, LLVMMemoryBufferRef, LLVMModuleRef*, char**)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMParseIRInContext(
      LLVMLibrary.LLVMContextRef ContextRef,
      LLVMLibrary.LLVMMemoryBufferRef MemBuf,
      LLVMLibrary.LLVMModuleRef OutM,
      PointerByReference OutMessage);
  /** Original signature : <code>void LLVMInitializeTransformUtils(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeTransformUtils(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeScalarOpts(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeScalarOpts(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeObjCARCOpts(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeObjCARCOpts(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeVectorization(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeVectorization(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeInstCombine(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeInstCombine(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeIPO(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeIPO(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeInstrumentation(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeInstrumentation(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeAnalysis(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeAnalysis(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeIPA(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeIPA(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeCodeGen(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeCodeGen(LLVMLibrary.LLVMPassRegistryRef R);
  /** Original signature : <code>void LLVMInitializeTarget(LLVMPassRegistryRef)</code> */
  public static native void LLVMInitializeTarget(LLVMLibrary.LLVMPassRegistryRef R);
  /**
   * ObjectFile creation<br>
   * Original signature : <code>LLVMObjectFileRef LLVMCreateObjectFile(LLVMMemoryBufferRef)</code>
   */
  public static native LLVMLibrary.LLVMObjectFileRef LLVMCreateObjectFile(
      LLVMLibrary.LLVMMemoryBufferRef MemBuf);
  /**
   * Original signature : <code>void LLVMDisposeObjectFile(LLVMObjectFileRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMDisposeObjectFile(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMObjectFileRef)} and
   *     {@link #LLVMDisposeObjectFile(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMDisposeObjectFile(Pointer ObjectFile);
  /** Original signature : <code>void LLVMDisposeObjectFile(LLVMObjectFileRef)</code> */
  public static native void LLVMDisposeObjectFile(LLVMLibrary.LLVMObjectFileRef ObjectFile);
  /**
   * ObjectFile Section iterators<br>
   * Original signature : <code>LLVMSectionIteratorRef LLVMGetSections(LLVMObjectFileRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSections(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMObjectFileRef)} and {@link
   *     #LLVMGetSections(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMSectionIteratorRef LLVMGetSections(Pointer ObjectFile);
  /**
   * ObjectFile Section iterators<br>
   * Original signature : <code>LLVMSectionIteratorRef LLVMGetSections(LLVMObjectFileRef)</code>
   */
  public static native LLVMLibrary.LLVMSectionIteratorRef LLVMGetSections(
      LLVMLibrary.LLVMObjectFileRef ObjectFile);
  /**
   * Original signature : <code>void LLVMDisposeSectionIterator(LLVMSectionIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMDisposeSectionIterator(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)}
   *     and {@link #LLVMDisposeSectionIterator(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMDisposeSectionIterator(Pointer SI);
  /** Original signature : <code>void LLVMDisposeSectionIterator(LLVMSectionIteratorRef)</code> */
  public static native void LLVMDisposeSectionIterator(LLVMLibrary.LLVMSectionIteratorRef SI);
  /**
   * Original signature : <code>
   * LLVMBool LLVMIsSectionIteratorAtEnd(LLVMObjectFileRef, LLVMSectionIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMIsSectionIteratorAtEnd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMObjectFileRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)} and {@link
   *     #LLVMIsSectionIteratorAtEnd(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBool LLVMIsSectionIteratorAtEnd(
      Pointer ObjectFile, Pointer SI);
  /**
   * Original signature : <code>
   * LLVMBool LLVMIsSectionIteratorAtEnd(LLVMObjectFileRef, LLVMSectionIteratorRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsSectionIteratorAtEnd(
      LLVMLibrary.LLVMObjectFileRef ObjectFile, LLVMLibrary.LLVMSectionIteratorRef SI);
  /**
   * Original signature : <code>void LLVMMoveToNextSection(LLVMSectionIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMMoveToNextSection(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)} and
   *     {@link #LLVMMoveToNextSection(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMMoveToNextSection(Pointer SI);
  /** Original signature : <code>void LLVMMoveToNextSection(LLVMSectionIteratorRef)</code> */
  public static native void LLVMMoveToNextSection(LLVMLibrary.LLVMSectionIteratorRef SI);
  /**
   * Original signature : <code>
   * void LLVMMoveToContainingSection(LLVMSectionIteratorRef, LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMMoveToContainingSection(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)} and {@link
   *     #LLVMMoveToContainingSection(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMMoveToContainingSection(Pointer Sect, Pointer Sym);
  /**
   * Original signature : <code>
   * void LLVMMoveToContainingSection(LLVMSectionIteratorRef, LLVMSymbolIteratorRef)</code>
   */
  public static native void LLVMMoveToContainingSection(
      LLVMLibrary.LLVMSectionIteratorRef Sect, LLVMLibrary.LLVMSymbolIteratorRef Sym);
  /**
   * ObjectFile Symbol iterators<br>
   * Original signature : <code>LLVMSymbolIteratorRef LLVMGetSymbols(LLVMObjectFileRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSymbols(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMObjectFileRef)} and {@link
   *     #LLVMGetSymbols(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMSymbolIteratorRef LLVMGetSymbols(Pointer ObjectFile);
  /**
   * ObjectFile Symbol iterators<br>
   * Original signature : <code>LLVMSymbolIteratorRef LLVMGetSymbols(LLVMObjectFileRef)</code>
   */
  public static native LLVMLibrary.LLVMSymbolIteratorRef LLVMGetSymbols(
      LLVMLibrary.LLVMObjectFileRef ObjectFile);
  /**
   * Original signature : <code>void LLVMDisposeSymbolIterator(LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMDisposeSymbolIterator(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)}
   *     and {@link #LLVMDisposeSymbolIterator(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMDisposeSymbolIterator(Pointer SI);
  /** Original signature : <code>void LLVMDisposeSymbolIterator(LLVMSymbolIteratorRef)</code> */
  public static native void LLVMDisposeSymbolIterator(LLVMLibrary.LLVMSymbolIteratorRef SI);
  /**
   * Original signature : <code>
   * LLVMBool LLVMIsSymbolIteratorAtEnd(LLVMObjectFileRef, LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMIsSymbolIteratorAtEnd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMObjectFileRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)} and {@link
   *     #LLVMIsSymbolIteratorAtEnd(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBool LLVMIsSymbolIteratorAtEnd(
      Pointer ObjectFile, Pointer SI);
  /**
   * Original signature : <code>
   * LLVMBool LLVMIsSymbolIteratorAtEnd(LLVMObjectFileRef, LLVMSymbolIteratorRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsSymbolIteratorAtEnd(
      LLVMLibrary.LLVMObjectFileRef ObjectFile, LLVMLibrary.LLVMSymbolIteratorRef SI);
  /**
   * Original signature : <code>void LLVMMoveToNextSymbol(LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMMoveToNextSymbol(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)} and
   *     {@link #LLVMMoveToNextSymbol(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMMoveToNextSymbol(Pointer SI);
  /** Original signature : <code>void LLVMMoveToNextSymbol(LLVMSymbolIteratorRef)</code> */
  public static native void LLVMMoveToNextSymbol(LLVMLibrary.LLVMSymbolIteratorRef SI);
  /**
   * SectionRef accessors<br>
   * Original signature : <code>char* LLVMGetSectionName(LLVMSectionIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSectionName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)} and
   *     {@link #LLVMGetSectionName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native String LLVMGetSectionName(Pointer SI);
  /**
   * SectionRef accessors<br>
   * Original signature : <code>char* LLVMGetSectionName(LLVMSectionIteratorRef)</code>
   */
  public static native String LLVMGetSectionName(LLVMLibrary.LLVMSectionIteratorRef SI);
  /**
   * Original signature : <code>uint64_t LLVMGetSectionSize(LLVMSectionIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSectionSize(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)} and
   *     {@link #LLVMGetSectionSize(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native long LLVMGetSectionSize(Pointer SI);
  /** Original signature : <code>uint64_t LLVMGetSectionSize(LLVMSectionIteratorRef)</code> */
  public static native long LLVMGetSectionSize(LLVMLibrary.LLVMSectionIteratorRef SI);
  /**
   * Original signature : <code>char* LLVMGetSectionContents(LLVMSectionIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSectionContents(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)}
   *     and {@link #LLVMGetSectionContents(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native String LLVMGetSectionContents(Pointer SI);
  /** Original signature : <code>char* LLVMGetSectionContents(LLVMSectionIteratorRef)</code> */
  public static native String LLVMGetSectionContents(LLVMLibrary.LLVMSectionIteratorRef SI);
  /**
   * Original signature : <code>uint64_t LLVMGetSectionAddress(LLVMSectionIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSectionAddress(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)} and
   *     {@link #LLVMGetSectionAddress(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native long LLVMGetSectionAddress(Pointer SI);
  /** Original signature : <code>uint64_t LLVMGetSectionAddress(LLVMSectionIteratorRef)</code> */
  public static native long LLVMGetSectionAddress(LLVMLibrary.LLVMSectionIteratorRef SI);
  /**
   * Original signature : <code>
   * LLVMBool LLVMGetSectionContainsSymbol(LLVMSectionIteratorRef, LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSectionContainsSymbol(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)} and {@link
   *     #LLVMGetSectionContainsSymbol(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBool LLVMGetSectionContainsSymbol(Pointer SI, Pointer Sym);
  /**
   * Original signature : <code>
   * LLVMBool LLVMGetSectionContainsSymbol(LLVMSectionIteratorRef, LLVMSymbolIteratorRef)</code>
   */
  public static native LLVMLibrary.LLVMBool LLVMGetSectionContainsSymbol(
      LLVMLibrary.LLVMSectionIteratorRef SI, LLVMLibrary.LLVMSymbolIteratorRef Sym);
  /**
   * Section Relocation iterators<br>
   * Original signature : <code>LLVMRelocationIteratorRef LLVMGetRelocations(LLVMSectionIteratorRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetRelocations(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef)} and
   *     {@link #LLVMGetRelocations(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMRelocationIteratorRef LLVMGetRelocations(Pointer Section);
  /**
   * Section Relocation iterators<br>
   * Original signature : <code>LLVMRelocationIteratorRef LLVMGetRelocations(LLVMSectionIteratorRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMRelocationIteratorRef LLVMGetRelocations(
      LLVMLibrary.LLVMSectionIteratorRef Section);
  /**
   * Original signature : <code>void LLVMDisposeRelocationIterator(LLVMRelocationIteratorRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMDisposeRelocationIterator(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)}
   *     and {@link #LLVMDisposeRelocationIterator(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMDisposeRelocationIterator(Pointer RI);
  /**
   * Original signature : <code>void LLVMDisposeRelocationIterator(LLVMRelocationIteratorRef)</code>
   */
  public static native void LLVMDisposeRelocationIterator(LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * Original signature : <code>
   * LLVMBool LLVMIsRelocationIteratorAtEnd(LLVMSectionIteratorRef, LLVMRelocationIteratorRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMIsRelocationIteratorAtEnd(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSectionIteratorRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)} and {@link
   *     #LLVMIsRelocationIteratorAtEnd(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMBool LLVMIsRelocationIteratorAtEnd(
      Pointer Section, Pointer RI);
  /**
   * Original signature : <code>
   * LLVMBool LLVMIsRelocationIteratorAtEnd(LLVMSectionIteratorRef, LLVMRelocationIteratorRef)
   * </code>
   */
  public static native LLVMLibrary.LLVMBool LLVMIsRelocationIteratorAtEnd(
      LLVMLibrary.LLVMSectionIteratorRef Section, LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * Original signature : <code>void LLVMMoveToNextRelocation(LLVMRelocationIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMMoveToNextRelocation(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)}
   *     and {@link #LLVMMoveToNextRelocation(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMMoveToNextRelocation(Pointer RI);
  /** Original signature : <code>void LLVMMoveToNextRelocation(LLVMRelocationIteratorRef)</code> */
  public static native void LLVMMoveToNextRelocation(LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * SymbolRef accessors<br>
   * Original signature : <code>char* LLVMGetSymbolName(LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSymbolName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)} and
   *     {@link #LLVMGetSymbolName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native String LLVMGetSymbolName(Pointer SI);
  /**
   * SymbolRef accessors<br>
   * Original signature : <code>char* LLVMGetSymbolName(LLVMSymbolIteratorRef)</code>
   */
  public static native String LLVMGetSymbolName(LLVMLibrary.LLVMSymbolIteratorRef SI);
  /**
   * Original signature : <code>uint64_t LLVMGetSymbolAddress(LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSymbolAddress(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)} and
   *     {@link #LLVMGetSymbolAddress(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native long LLVMGetSymbolAddress(Pointer SI);
  /** Original signature : <code>uint64_t LLVMGetSymbolAddress(LLVMSymbolIteratorRef)</code> */
  public static native long LLVMGetSymbolAddress(LLVMLibrary.LLVMSymbolIteratorRef SI);
  /**
   * Original signature : <code>uint64_t LLVMGetSymbolSize(LLVMSymbolIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetSymbolSize(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMSymbolIteratorRef)} and
   *     {@link #LLVMGetSymbolSize(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native long LLVMGetSymbolSize(Pointer SI);
  /** Original signature : <code>uint64_t LLVMGetSymbolSize(LLVMSymbolIteratorRef)</code> */
  public static native long LLVMGetSymbolSize(LLVMLibrary.LLVMSymbolIteratorRef SI);
  /**
   * RelocationRef accessors<br>
   * Original signature : <code>uint64_t LLVMGetRelocationOffset(LLVMRelocationIteratorRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetRelocationOffset(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)}
   *     and {@link #LLVMGetRelocationOffset(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native long LLVMGetRelocationOffset(Pointer RI);
  /**
   * RelocationRef accessors<br>
   * Original signature : <code>uint64_t LLVMGetRelocationOffset(LLVMRelocationIteratorRef)</code>
   */
  public static native long LLVMGetRelocationOffset(LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * Original signature : <code>
   * LLVMSymbolIteratorRef LLVMGetRelocationSymbol(LLVMRelocationIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetRelocationSymbol(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)}
   *     and {@link #LLVMGetRelocationSymbol(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMSymbolIteratorRef LLVMGetRelocationSymbol(Pointer RI);
  /**
   * Original signature : <code>
   * LLVMSymbolIteratorRef LLVMGetRelocationSymbol(LLVMRelocationIteratorRef)</code>
   */
  public static native LLVMLibrary.LLVMSymbolIteratorRef LLVMGetRelocationSymbol(
      LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * Original signature : <code>uint64_t LLVMGetRelocationType(LLVMRelocationIteratorRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetRelocationType(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)}
   *     and {@link #LLVMGetRelocationType(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native long LLVMGetRelocationType(Pointer RI);
  /** Original signature : <code>uint64_t LLVMGetRelocationType(LLVMRelocationIteratorRef)</code> */
  public static native long LLVMGetRelocationType(LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * following functions.<br>
   * Original signature : <code>char* LLVMGetRelocationTypeName(LLVMRelocationIteratorRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetRelocationTypeName(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)}
   *     and {@link #LLVMGetRelocationTypeName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native String LLVMGetRelocationTypeName(Pointer RI);
  /**
   * following functions.<br>
   * Original signature : <code>char* LLVMGetRelocationTypeName(LLVMRelocationIteratorRef)</code>
   */
  public static native String LLVMGetRelocationTypeName(LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * Original signature : <code>char* LLVMGetRelocationValueString(LLVMRelocationIteratorRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMGetRelocationValueString(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMRelocationIteratorRef)}
   *     and {@link #LLVMGetRelocationValueString(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native String LLVMGetRelocationValueString(Pointer RI);
  /**
   * Original signature : <code>char* LLVMGetRelocationValueString(LLVMRelocationIteratorRef)</code>
   */
  public static native String LLVMGetRelocationValueString(
      LLVMLibrary.LLVMRelocationIteratorRef RI);
  /**
   * Obtain the data layout for a module.<br>
   * See Module::getDataLayout()<br>
   * Original signature : <code>LLVMTargetDataRef LLVMGetModuleDataLayout(LLVMModuleRef)</code>
   */
  public static native LLVMLibrary.LLVMTargetDataRef LLVMGetModuleDataLayout(
      LLVMLibrary.LLVMModuleRef M);
  /**
   * Set the data layout for a module.<br>
   * See Module::setDataLayout()<br>
   * Original signature : <code>void LLVMSetModuleDataLayout(LLVMModuleRef, LLVMTargetDataRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSetModuleDataLayout(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef)} and {@link
   *     #LLVMSetModuleDataLayout(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMModuleRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMSetModuleDataLayout(LLVMLibrary.LLVMModuleRef M, Pointer DL);
  /**
   * Set the data layout for a module.<br>
   * See Module::setDataLayout()<br>
   * Original signature : <code>void LLVMSetModuleDataLayout(LLVMModuleRef, LLVMTargetDataRef)
   * </code>
   */
  public static native void LLVMSetModuleDataLayout(
      LLVMLibrary.LLVMModuleRef M, LLVMLibrary.LLVMTargetDataRef DL);
  /**
   * Creates target data from a target layout string.<br>
   * See the constructor llvm::DataLayout::DataLayout.<br>
   * Original signature : <code>LLVMTargetDataRef LLVMCreateTargetData(const char*)</code><br>
   *
   * @deprecated use the safer methods {@link #LLVMCreateTargetData(java.lang.String)} and {@link
   *     #LLVMCreateTargetData(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMTargetDataRef LLVMCreateTargetData(Pointer StringRep);
  /**
   * Creates target data from a target layout string.<br>
   * See the constructor llvm::DataLayout::DataLayout.<br>
   * Original signature : <code>LLVMTargetDataRef LLVMCreateTargetData(const char*)</code>
   */
  public static native LLVMLibrary.LLVMTargetDataRef LLVMCreateTargetData(String StringRep);
  /**
   * Deallocates a TargetData.<br>
   * See the destructor llvm::DataLayout::~DataLayout.<br>
   * Original signature : <code>void LLVMDisposeTargetData(LLVMTargetDataRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMDisposeTargetData(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef)} and
   *     {@link #LLVMDisposeTargetData(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native void LLVMDisposeTargetData(Pointer TD);
  /**
   * Deallocates a TargetData.<br>
   * See the destructor llvm::DataLayout::~DataLayout.<br>
   * Original signature : <code>void LLVMDisposeTargetData(LLVMTargetDataRef)</code>
   */
  public static native void LLVMDisposeTargetData(LLVMLibrary.LLVMTargetDataRef TD);
  /**
   * Adds target library information to a pass manager. This does not take<br>
   * ownership of the target library info.<br>
   * See the method llvm::PassManagerBase::add.<br>
   * Original signature : <code>
   * void LLVMAddTargetLibraryInfo(LLVMTargetLibraryInfoRef, LLVMPassManagerRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMAddTargetLibraryInfo(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetLibraryInfoRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef)} and {@link
   *     #LLVMAddTargetLibraryInfo(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMPassManagerRef)} instead
   */
  @Deprecated
  public static native void LLVMAddTargetLibraryInfo(
      Pointer TLI, LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * Adds target library information to a pass manager. This does not take<br>
   * ownership of the target library info.<br>
   * See the method llvm::PassManagerBase::add.<br>
   * Original signature : <code>
   * void LLVMAddTargetLibraryInfo(LLVMTargetLibraryInfoRef, LLVMPassManagerRef)</code>
   */
  public static native void LLVMAddTargetLibraryInfo(
      LLVMLibrary.LLVMTargetLibraryInfoRef TLI, LLVMLibrary.LLVMPassManagerRef PM);
  /**
   * Converts target data to a target layout string. The string must be disposed<br>
   * with LLVMDisposeMessage.<br>
   * See the constructor llvm::DataLayout::DataLayout.<br>
   * Original signature : <code>char* LLVMCopyStringRepOfTargetData(LLVMTargetDataRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMCopyStringRepOfTargetData(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef)}
   *     and {@link #LLVMCopyStringRepOfTargetData(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native Pointer LLVMCopyStringRepOfTargetData(Pointer TD);
  /**
   * Converts target data to a target layout string. The string must be disposed<br>
   * with LLVMDisposeMessage.<br>
   * See the constructor llvm::DataLayout::DataLayout.<br>
   * Original signature : <code>char* LLVMCopyStringRepOfTargetData(LLVMTargetDataRef)</code>
   */
  public static native Pointer LLVMCopyStringRepOfTargetData(LLVMLibrary.LLVMTargetDataRef TD);
  /**
   * Returns the byte order of a target, either LLVMBigEndian or<br>
   * LLVMLittleEndian.<br>
   * See the method llvm::DataLayout::isLittleEndian.<br>
   * Original signature : <code>LLVMByteOrdering LLVMByteOrder(LLVMTargetDataRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMByteOrder(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef)} and {@link
   *     #LLVMByteOrder(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native int LLVMByteOrder(Pointer TD);
  /**
   * Returns the byte order of a target, either LLVMBigEndian or<br>
   * LLVMLittleEndian.<br>
   * See the method llvm::DataLayout::isLittleEndian.<br>
   * Original signature : <code>LLVMByteOrdering LLVMByteOrder(LLVMTargetDataRef)</code>
   */
  public static native int LLVMByteOrder(LLVMLibrary.LLVMTargetDataRef TD);
  /**
   * Returns the pointer size in bytes for a target.<br>
   * See the method llvm::DataLayout::getPointerSize.<br>
   * Original signature : <code>int LLVMPointerSize(LLVMTargetDataRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPointerSize(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef)} and {@link
   *     #LLVMPointerSize(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native int LLVMPointerSize(Pointer TD);
  /**
   * Returns the pointer size in bytes for a target.<br>
   * See the method llvm::DataLayout::getPointerSize.<br>
   * Original signature : <code>int LLVMPointerSize(LLVMTargetDataRef)</code>
   */
  public static native int LLVMPointerSize(LLVMLibrary.LLVMTargetDataRef TD);
  /**
   * Returns the pointer size in bytes for a target for a specified<br>
   * address space.<br>
   * See the method llvm::DataLayout::getPointerSize.<br>
   * Original signature : <code>int LLVMPointerSizeForAS(LLVMTargetDataRef, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPointerSizeForAS(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef, int)} and
   *     {@link #LLVMPointerSizeForAS(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native int LLVMPointerSizeForAS(Pointer TD, int AS);
  /**
   * Returns the pointer size in bytes for a target for a specified<br>
   * address space.<br>
   * See the method llvm::DataLayout::getPointerSize.<br>
   * Original signature : <code>int LLVMPointerSizeForAS(LLVMTargetDataRef, unsigned)</code>
   */
  public static native int LLVMPointerSizeForAS(LLVMLibrary.LLVMTargetDataRef TD, int AS);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>LLVMTypeRef LLVMIntPtrType(LLVMTargetDataRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMIntPtrType(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef)} and {@link
   *     #LLVMIntPtrType(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrType(Pointer TD);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>LLVMTypeRef LLVMIntPtrType(LLVMTargetDataRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrType(LLVMLibrary.LLVMTargetDataRef TD);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * This version allows the address space to be specified.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>LLVMTypeRef LLVMIntPtrTypeForAS(LLVMTargetDataRef, unsigned)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMIntPtrTypeForAS(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef, int)} and
   *     {@link #LLVMIntPtrTypeForAS(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeForAS(Pointer TD, int AS);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * This version allows the address space to be specified.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>LLVMTypeRef LLVMIntPtrTypeForAS(LLVMTargetDataRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeForAS(
      LLVMLibrary.LLVMTargetDataRef TD, int AS);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>
   * LLVMTypeRef LLVMIntPtrTypeInContext(LLVMContextRef, LLVMTargetDataRef)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMIntPtrTypeInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef)} and {@link
   *     #LLVMIntPtrTypeInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     com.sun.jna.Pointer)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeInContext(
      LLVMLibrary.LLVMContextRef C, Pointer TD);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>
   * LLVMTypeRef LLVMIntPtrTypeInContext(LLVMContextRef, LLVMTargetDataRef)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeInContext(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMTargetDataRef TD);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * This version allows the address space to be specified.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>
   * LLVMTypeRef LLVMIntPtrTypeForASInContext(LLVMContextRef, LLVMTargetDataRef, unsigned)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMIntPtrTypeForASInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef, int)} and {@link
   *     #LLVMIntPtrTypeForASInContext(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMContextRef,
   *     com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeForASInContext(
      LLVMLibrary.LLVMContextRef C, Pointer TD, int AS);
  /**
   * Returns the integer type that is the same size as a pointer on a target.<br>
   * This version allows the address space to be specified.<br>
   * See the method llvm::DataLayout::getIntPtrType.<br>
   * Original signature : <code>
   * LLVMTypeRef LLVMIntPtrTypeForASInContext(LLVMContextRef, LLVMTargetDataRef, unsigned)</code>
   */
  public static native LLVMLibrary.LLVMTypeRef LLVMIntPtrTypeForASInContext(
      LLVMLibrary.LLVMContextRef C, LLVMLibrary.LLVMTargetDataRef TD, int AS);
  /**
   * Computes the size of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeSizeInBits.<br>
   * Original signature : <code>long long LLVMSizeOfTypeInBits(LLVMTargetDataRef, LLVMTypeRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMSizeOfTypeInBits(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} and {@link
   *     #LLVMSizeOfTypeInBits(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} instead
   */
  @Deprecated
  public static native long LLVMSizeOfTypeInBits(Pointer TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the size of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeSizeInBits.<br>
   * Original signature : <code>long long LLVMSizeOfTypeInBits(LLVMTargetDataRef, LLVMTypeRef)
   * </code>
   */
  public static native long LLVMSizeOfTypeInBits(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the storage size of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeStoreSize.<br>
   * Original signature : <code>long long LLVMStoreSizeOfType(LLVMTargetDataRef, LLVMTypeRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMStoreSizeOfType(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} and {@link
   *     #LLVMStoreSizeOfType(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} instead
   */
  @Deprecated
  public static native long LLVMStoreSizeOfType(Pointer TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the storage size of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeStoreSize.<br>
   * Original signature : <code>long long LLVMStoreSizeOfType(LLVMTargetDataRef, LLVMTypeRef)</code>
   */
  public static native long LLVMStoreSizeOfType(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the ABI size of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeAllocSize.<br>
   * Original signature : <code>long long LLVMABISizeOfType(LLVMTargetDataRef, LLVMTypeRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMABISizeOfType(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} and {@link
   *     #LLVMABISizeOfType(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} instead
   */
  @Deprecated
  public static native long LLVMABISizeOfType(Pointer TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the ABI size of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeAllocSize.<br>
   * Original signature : <code>long long LLVMABISizeOfType(LLVMTargetDataRef, LLVMTypeRef)</code>
   */
  public static native long LLVMABISizeOfType(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the ABI alignment of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeABISize.<br>
   * Original signature : <code>int LLVMABIAlignmentOfType(LLVMTargetDataRef, LLVMTypeRef)</code>
   * <br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMABIAlignmentOfType(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} and {@link
   *     #LLVMABIAlignmentOfType(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} instead
   */
  @Deprecated
  public static native int LLVMABIAlignmentOfType(Pointer TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the ABI alignment of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeABISize.<br>
   * Original signature : <code>int LLVMABIAlignmentOfType(LLVMTargetDataRef, LLVMTypeRef)</code>
   */
  public static native int LLVMABIAlignmentOfType(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the call frame alignment of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeABISize.<br>
   * Original signature : <code>int LLVMCallFrameAlignmentOfType(LLVMTargetDataRef, LLVMTypeRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMCallFrameAlignmentOfType(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} and {@link
   *     #LLVMCallFrameAlignmentOfType(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} instead
   */
  @Deprecated
  public static native int LLVMCallFrameAlignmentOfType(Pointer TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the call frame alignment of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeABISize.<br>
   * Original signature : <code>int LLVMCallFrameAlignmentOfType(LLVMTargetDataRef, LLVMTypeRef)
   * </code>
   */
  public static native int LLVMCallFrameAlignmentOfType(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the preferred alignment of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeABISize.<br>
   * Original signature : <code>int LLVMPreferredAlignmentOfType(LLVMTargetDataRef, LLVMTypeRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPreferredAlignmentOfType(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} and {@link
   *     #LLVMPreferredAlignmentOfType(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef)} instead
   */
  @Deprecated
  public static native int LLVMPreferredAlignmentOfType(Pointer TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the preferred alignment of a type in bytes for a target.<br>
   * See the method llvm::DataLayout::getTypeABISize.<br>
   * Original signature : <code>int LLVMPreferredAlignmentOfType(LLVMTargetDataRef, LLVMTypeRef)
   * </code>
   */
  public static native int LLVMPreferredAlignmentOfType(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef Ty);
  /**
   * Computes the preferred alignment of a global variable in bytes for a target.<br>
   * See the method llvm::DataLayout::getPreferredAlignment.<br>
   * Original signature : <code>int LLVMPreferredAlignmentOfGlobal(LLVMTargetDataRef, LLVMValueRef)
   * </code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMPreferredAlignmentOfGlobal(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef)} and {@link
   *     #LLVMPreferredAlignmentOfGlobal(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMValueRef)} instead
   */
  @Deprecated
  public static native int LLVMPreferredAlignmentOfGlobal(
      Pointer TD, LLVMLibrary.LLVMValueRef GlobalVar);
  /**
   * Computes the preferred alignment of a global variable in bytes for a target.<br>
   * See the method llvm::DataLayout::getPreferredAlignment.<br>
   * Original signature : <code>int LLVMPreferredAlignmentOfGlobal(LLVMTargetDataRef, LLVMValueRef)
   * </code>
   */
  public static native int LLVMPreferredAlignmentOfGlobal(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMValueRef GlobalVar);
  /**
   * Computes the structure element that contains the byte offset for a target.<br>
   * See the method llvm::StructLayout::getElementContainingOffset.<br>
   * Original signature : <code>
   * int LLVMElementAtOffset(LLVMTargetDataRef, LLVMTypeRef, unsigned long long)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMElementAtOffset(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, long)} and {@link
   *     #LLVMElementAtOffset(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, long)} instead
   */
  @Deprecated
  public static native int LLVMElementAtOffset(
      Pointer TD, LLVMLibrary.LLVMTypeRef StructTy, long Offset);
  /**
   * Computes the structure element that contains the byte offset for a target.<br>
   * See the method llvm::StructLayout::getElementContainingOffset.<br>
   * Original signature : <code>
   * int LLVMElementAtOffset(LLVMTargetDataRef, LLVMTypeRef, unsigned long long)</code>
   */
  public static native int LLVMElementAtOffset(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef StructTy, long Offset);
  /**
   * Computes the byte offset of the indexed struct element for a target.<br>
   * See the method llvm::StructLayout::getElementContainingOffset.<br>
   * Original signature : <code>
   * long long LLVMOffsetOfElement(LLVMTargetDataRef, LLVMTypeRef, unsigned)</code><br>
   *
   * @deprecated use the safer methods {@link
   *     #LLVMOffsetOfElement(org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTargetDataRef,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, int)} and {@link
   *     #LLVMOffsetOfElement(com.sun.jna.Pointer,
   *     org.sosy_lab.llvm_j.binding.LLVMLibrary.LLVMTypeRef, int)} instead
   */
  @Deprecated
  public static native long LLVMOffsetOfElement(
      Pointer TD, LLVMLibrary.LLVMTypeRef StructTy, int Element);
  /**
   * Computes the byte offset of the indexed struct element for a target.<br>
   * See the method llvm::StructLayout::getElementContainingOffset.<br>
   * Original signature : <code>
   * long long LLVMOffsetOfElement(LLVMTargetDataRef, LLVMTypeRef, unsigned)</code>
   */
  public static native long LLVMOffsetOfElement(
      LLVMLibrary.LLVMTargetDataRef TD, LLVMLibrary.LLVMTypeRef StructTy, int Element);

  public static class LLVMAttributeRef extends PointerType {
    public LLVMAttributeRef(Pointer address) {
      super(address);
    }

    public LLVMAttributeRef() {
      super();
    }
  };

  public static class LLVMContextRef extends PointerType {
    public LLVMContextRef(Pointer address) {
      super(address);
    }

    public LLVMContextRef() {
      super();
    }
  };

  public static class LLVMObjectFileRef extends PointerType {
    public LLVMObjectFileRef(Pointer address) {
      super(address);
    }

    public LLVMObjectFileRef() {
      super();
    }
  };

  public static class LLVMSymbolIteratorRef extends PointerType {
    public LLVMSymbolIteratorRef(Pointer address) {
      super(address);
    }

    public LLVMSymbolIteratorRef() {
      super();
    }
  };

  public static class LLVMDiagnosticInfoRef extends PointerType {
    public LLVMDiagnosticInfoRef(Pointer address) {
      super(address);
    }

    public LLVMDiagnosticInfoRef() {
      super();
    }
  };

  public static class LLVMValueRef extends PointerType {
    public LLVMValueRef(Pointer address) {
      super(address);
    }

    public LLVMValueRef() {
      super();
    }
  };

  public static class LLVMPassManagerRef extends PointerType {
    public LLVMPassManagerRef(Pointer address) {
      super(address);
    }

    public LLVMPassManagerRef() {
      super();
    }
  };

  public static class LLVMRelocationIteratorRef extends PointerType {
    public LLVMRelocationIteratorRef(Pointer address) {
      super(address);
    }

    public LLVMRelocationIteratorRef() {
      super();
    }
  };

  public static class LLVMTypeRef extends PointerType {
    public LLVMTypeRef(Pointer address) {
      super(address);
    }

    public LLVMTypeRef() {
      super();
    }
  };

  public static class LLVMModuleProviderRef extends PointerType {
    public LLVMModuleProviderRef(Pointer address) {
      super(address);
    }

    public LLVMModuleProviderRef() {
      super();
    }
  };

  public static class LLVMModuleRef extends PointerType {
    public LLVMModuleRef(Pointer address) {
      super(address);
    }

    public LLVMModuleRef() {
      super();
    }
  };

  public static class LLVMUseRef extends PointerType {
    public LLVMUseRef(Pointer address) {
      super(address);
    }

    public LLVMUseRef() {
      super();
    }
  };

  public static class LLVMBool extends PointerType {
    public LLVMBool(Pointer address) {
      super(address);
    }

    public LLVMBool() {
      super();
    }
  };

  public static class LLVMPassManagerBuilderRef extends PointerType {
    public LLVMPassManagerBuilderRef(Pointer address) {
      super(address);
    }

    public LLVMPassManagerBuilderRef() {
      super();
    }
  };

  public static class LLVMBasicBlockRef extends PointerType {
    public LLVMBasicBlockRef(Pointer address) {
      super(address);
    }

    public LLVMBasicBlockRef() {
      super();
    }
  };

  public static class LLVMTargetLibraryInfoRef extends PointerType {
    public LLVMTargetLibraryInfoRef(Pointer address) {
      super(address);
    }

    public LLVMTargetLibraryInfoRef() {
      super();
    }
  };

  public static class LLVMMemoryBufferRef extends PointerType {
    public LLVMMemoryBufferRef(Pointer address) {
      super(address);
    }

    public LLVMMemoryBufferRef() {
      super();
    }
  };

  public static class LLVMSectionIteratorRef extends PointerType {
    public LLVMSectionIteratorRef(Pointer address) {
      super(address);
    }

    public LLVMSectionIteratorRef() {
      super();
    }
  };

  public static class LLVMPassRegistryRef extends PointerType {
    public LLVMPassRegistryRef(Pointer address) {
      super(address);
    }

    public LLVMPassRegistryRef() {
      super();
    }
  };

  public static class LLVMBuilderRef extends PointerType {
    public LLVMBuilderRef(Pointer address) {
      super(address);
    }

    public LLVMBuilderRef() {
      super();
    }
  };

  public static class LLVMTargetDataRef extends PointerType {
    public LLVMTargetDataRef(Pointer address) {
      super(address);
    }

    public LLVMTargetDataRef() {
      super();
    }
  };
}
